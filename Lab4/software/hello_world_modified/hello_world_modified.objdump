
hello_world_modified.elf:     file format elf32-littlenios2
hello_world_modified.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000003b8 memsz 0x000003b8 flags r-x
    LOAD off    0x000013d8 vaddr 0x000003d8 paddr 0x00000448 align 2**12
         filesz 0x00000070 memsz 0x00000070 flags rw-
    LOAD off    0x000014b8 vaddr 0x000004b8 paddr 0x000004b8 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00000020  00000020  00001448  2**0
                  CONTENTS
  2 .text         00000370  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000048  00000390  00000390  00001390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000070  000003d8  00000448  000013d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  000004b8  000004b8  000014b8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  000004c4  000004c4  00001448  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001448  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000001c8  00000000  00000000  00001470  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000014be  00000000  00000000  00001638  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000960  00000000  00000000  00002af6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000009d6  00000000  00000000  00003456  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000001fc  00000000  00000000  00003e2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000844  00000000  00000000  00004028  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000217  00000000  00000000  0000486c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00004a84  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000a8  00000000  00000000  00004a98  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00005a1a  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000f  00000000  00000000  00005a1d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00005a2c  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00005a2d  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  00005a2e  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  00005a37  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  00005a40  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000008  00000000  00000000  00005a49  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000024  00000000  00000000  00005a51  2**0
                  CONTENTS, READONLY
 26 .jdi          00004255  00000000  00000000  00005a75  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00036c4c  00000000  00000000  00009cca  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000020 l    d  .text	00000000 .text
00000390 l    d  .rodata	00000000 .rodata
000003d8 l    d  .rwdata	00000000 .rwdata
000004b8 l    d  .bss	00000000 .bss
000004c4 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../hello_world_modified_bsp//obj/HAL/src/crt0.o
00000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000002e4 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 strlen.c
000001c8 g     F .text	0000002c alt_main
00000448 g       *ABS*	00000000 __flash_rwdata_start
000001f4 g     F .text	00000038 alt_putstr
00000430 g     O .rwdata	00000004 jtag_uart
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
000004bc g     O .bss	00000004 alt_argv
00008430 g       *ABS*	00000000 _gp
000003d8 g     O .rwdata	00000030 alt_fd_list
00000250 g     F .text	0000005c altera_avalon_jtag_uart_read
00000434 g     O .rwdata	00000004 alt_max_fd
000004c4 g       *ABS*	00000000 __bss_end
000000a4 g     F .text	00000044 alt_getchar
00000408 g     O .rwdata	00000028 alt_dev_null
000002e0 g     F .text	00000004 alt_dcache_flush_all
00000448 g       *ABS*	00000000 __ram_rwdata_end
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory
00000438 g     O .rwdata	00000008 alt_dev_list
000003d8 g       *ABS*	00000000 __ram_rodata_end
000004c4 g       *ABS*	00000000 end
00008000 g       *ABS*	00000000 __alt_stack_pointer
000002ac g     F .text	00000034 altera_avalon_jtag_uart_write
00000020 g     F .text	0000003c _start
0000024c g     F .text	00000004 alt_sys_init
000003d8 g       *ABS*	00000000 __ram_rwdata_start
00000390 g       *ABS*	00000000 __ram_rodata_start
000004c4 g       *ABS*	00000000 __alt_stack_base
000004b8 g       *ABS*	00000000 __bss_start
0000005c g     F .text	00000048 main
000004b8 g     O .bss	00000004 alt_envp
00000390 g       *ABS*	00000000 __flash_rodata_start
0000022c g     F .text	00000020 alt_irq_init
000004c0 g     O .bss	00000004 alt_argc
00000440 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00000448 g       *ABS*	00000000 _edata
000004c4 g       *ABS*	00000000 _end
00000020 g       *ABS*	00000000 __ram_exceptions_end
000002f0 g     F .text	00000008 altera_nios2_qsys_irq_init
00008000 g       *ABS*	00000000 __alt_data_end
0000000c g       .entry	00000000 _exit
000002f8 g     F .text	00000098 strlen
000002ec g     F .text	00000004 alt_icache_flush_all
000000e8 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08400814 	ori	at,at,32
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .text:

00000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  20:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
  24:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
  28:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
  2c:	d6a10c14 	ori	gp,gp,33840
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  30:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
  34:	10812e14 	ori	r2,r2,1208

    movhi r3, %hi(__bss_end)
  38:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
  3c:	18c13114 	ori	r3,r3,1220

    beq r2, r3, 1f
  40:	10c00326 	beq	r2,r3,50 <_start+0x30>

0:
    stw zero, (r2)
  44:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  48:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  4c:	10fffd36 	bltu	r2,r3,44 <_gp+0xffff7c14>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  50:	00000e80 	call	e8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  54:	00001c80 	call	1c8 <alt_main>

00000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  58:	003fff06 	br	58 <_gp+0xffff7c28>

0000005c <main>:


int main() {

	/* Prompting */
	alt_putstr("Hello from Nios II!\n");
  5c:	01000034 	movhi	r4,0

#define switches (volatile char *) 0x9010
#define leds (char *) 0x9000


int main() {
  60:	defffe04 	addi	sp,sp,-8

	/* Prompting */
	alt_putstr("Hello from Nios II!\n");
  64:	2100e404 	addi	r4,r4,912

#define switches (volatile char *) 0x9010
#define leds (char *) 0x9000


int main() {
  68:	dfc00115 	stw	ra,4(sp)
  6c:	dc000015 	stw	r16,0(sp)

	/* Prompting */
	alt_putstr("Hello from Nios II!\n");
  70:	00001f40 	call	1f4 <alt_putstr>
	alt_putstr("\n Enter a 'g' to start switches > \n");
  74:	01000034 	movhi	r4,0
  78:	2100ea04 	addi	r4,r4,936
  7c:	00001f40 	call	1f4 <alt_putstr>

	/* Give input a dummy value */
	char in = 'x';

	/* Wait until we receive a g before proceeding */
	while (in != 'g') {
  80:	040019c4 	movi	r16,103
		in = alt_getchar();
  84:	00000a40 	call	a4 <alt_getchar>

	/* Give input a dummy value */
	char in = 'x';

	/* Wait until we receive a g before proceeding */
	while (in != 'g') {
  88:	10803fcc 	andi	r2,r2,255
  8c:	1080201c 	xori	r2,r2,128
  90:	10bfe004 	addi	r2,r2,-128
  94:	143ffb1e 	bne	r2,r16,84 <_gp+0xffff7c54>
		in = alt_getchar();
	}

	/* Assign leds via switches, indefinitely. */
	while (1) {
		*leds = *switches;
  98:	00a40414 	movui	r2,36880
  9c:	10c00003 	ldbu	r3,0(r2)
  a0:	003ffe06 	br	9c <_gp+0xffff7c6c>

000000a4 <alt_getchar>:
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
  a4:	00800034 	movhi	r2,0
  a8:	1080f604 	addi	r2,r2,984
  ac:	11c00217 	ldw	r7,8(r2)
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
  b0:	defffe04 	addi	sp,sp,-8
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
  b4:	01000034 	movhi	r4,0
  b8:	01800044 	movi	r6,1
  bc:	d80b883a 	mov	r5,sp
  c0:	21010c04 	addi	r4,r4,1072
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
  c4:	dfc00115 	stw	ra,4(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
  c8:	00002500 	call	250 <altera_avalon_jtag_uart_read>
  cc:	0080020e 	bge	zero,r2,d8 <alt_getchar+0x34>
        return -1;
    }
    return c;
  d0:	d8800007 	ldb	r2,0(sp)
  d4:	00000106 	br	dc <alt_getchar+0x38>
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
        return -1;
  d8:	00bfffc4 	movi	r2,-1
    return c;
#else
    return getchar();
#endif
#endif
}
  dc:	dfc00117 	ldw	ra,4(sp)
  e0:	dec00204 	addi	sp,sp,8
  e4:	f800283a 	ret

000000e8 <alt_load>:
  e8:	deffff04 	addi	sp,sp,-4
  ec:	01000034 	movhi	r4,0
  f0:	01400034 	movhi	r5,0
  f4:	dfc00015 	stw	ra,0(sp)
  f8:	2100f604 	addi	r4,r4,984
  fc:	29411204 	addi	r5,r5,1096
 100:	2140061e 	bne	r4,r5,11c <alt_load+0x34>
 104:	01000034 	movhi	r4,0
 108:	01400034 	movhi	r5,0
 10c:	21000804 	addi	r4,r4,32
 110:	29400804 	addi	r5,r5,32
 114:	2140121e 	bne	r4,r5,160 <alt_load+0x78>
 118:	00000b06 	br	148 <alt_load+0x60>
 11c:	00c00034 	movhi	r3,0
 120:	18c11204 	addi	r3,r3,1096
 124:	1907c83a 	sub	r3,r3,r4
 128:	0005883a 	mov	r2,zero
 12c:	10fff526 	beq	r2,r3,104 <_gp+0xffff7cd4>
 130:	114f883a 	add	r7,r2,r5
 134:	39c00017 	ldw	r7,0(r7)
 138:	110d883a 	add	r6,r2,r4
 13c:	10800104 	addi	r2,r2,4
 140:	31c00015 	stw	r7,0(r6)
 144:	003ff906 	br	12c <_gp+0xffff7cfc>
 148:	01000034 	movhi	r4,0
 14c:	01400034 	movhi	r5,0
 150:	2100e404 	addi	r4,r4,912
 154:	2940e404 	addi	r5,r5,912
 158:	2140101e 	bne	r4,r5,19c <alt_load+0xb4>
 15c:	00000b06 	br	18c <alt_load+0xa4>
 160:	00c00034 	movhi	r3,0
 164:	18c00804 	addi	r3,r3,32
 168:	1907c83a 	sub	r3,r3,r4
 16c:	0005883a 	mov	r2,zero
 170:	10fff526 	beq	r2,r3,148 <_gp+0xffff7d18>
 174:	114f883a 	add	r7,r2,r5
 178:	39c00017 	ldw	r7,0(r7)
 17c:	110d883a 	add	r6,r2,r4
 180:	10800104 	addi	r2,r2,4
 184:	31c00015 	stw	r7,0(r6)
 188:	003ff906 	br	170 <_gp+0xffff7d40>
 18c:	00002e00 	call	2e0 <alt_dcache_flush_all>
 190:	dfc00017 	ldw	ra,0(sp)
 194:	dec00104 	addi	sp,sp,4
 198:	00002ec1 	jmpi	2ec <alt_icache_flush_all>
 19c:	00c00034 	movhi	r3,0
 1a0:	18c0f604 	addi	r3,r3,984
 1a4:	1907c83a 	sub	r3,r3,r4
 1a8:	0005883a 	mov	r2,zero
 1ac:	18bff726 	beq	r3,r2,18c <_gp+0xffff7d5c>
 1b0:	114f883a 	add	r7,r2,r5
 1b4:	39c00017 	ldw	r7,0(r7)
 1b8:	110d883a 	add	r6,r2,r4
 1bc:	10800104 	addi	r2,r2,4
 1c0:	31c00015 	stw	r7,0(r6)
 1c4:	003ff906 	br	1ac <_gp+0xffff7d7c>

000001c8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 1c8:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 1cc:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 1d0:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 1d4:	000022c0 	call	22c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 1d8:	000024c0 	call	24c <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 1dc:	d1a02217 	ldw	r6,-32632(gp)
 1e0:	d1602317 	ldw	r5,-32628(gp)
 1e4:	d1202417 	ldw	r4,-32624(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 1e8:	dfc00017 	ldw	ra,0(sp)
 1ec:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 1f0:	000005c1 	jmpi	5c <main>

000001f4 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
 1f4:	defffe04 	addi	sp,sp,-8
 1f8:	dc000015 	stw	r16,0(sp)
 1fc:	dfc00115 	stw	ra,4(sp)
 200:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 204:	00002f80 	call	2f8 <strlen>
 208:	01000034 	movhi	r4,0
 20c:	000f883a 	mov	r7,zero
 210:	100d883a 	mov	r6,r2
 214:	800b883a 	mov	r5,r16
 218:	21010c04 	addi	r4,r4,1072
#else
    return fputs(str, stdout);
#endif
#endif
}
 21c:	dfc00117 	ldw	ra,4(sp)
 220:	dc000017 	ldw	r16,0(sp)
 224:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 228:	00002ac1 	jmpi	2ac <altera_avalon_jtag_uart_write>

0000022c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 22c:	deffff04 	addi	sp,sp,-4
 230:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_PROCESSOR, nios2_processor);
 234:	00002f00 	call	2f0 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 238:	00800044 	movi	r2,1
 23c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 240:	dfc00017 	ldw	ra,0(sp)
 244:	dec00104 	addi	sp,sp,4
 248:	f800283a 	ret

0000024c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 24c:	f800283a 	ret

00000250 <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
 250:	21000017 	ldw	r4,0(r4)

  char * ptr = buffer;
  char * end = buffer + space;
 254:	298d883a 	add	r6,r5,r6

  while (ptr < end)
 258:	2805883a 	mov	r2,r5

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
 25c:	3a10000c 	andi	r8,r7,16384
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
 260:	11800b2e 	bgeu	r2,r6,290 <altera_avalon_jtag_uart_read+0x40>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 264:	20c00037 	ldwio	r3,0(r4)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
 268:	1a60000c 	andi	r9,r3,32768
 26c:	48000326 	beq	r9,zero,27c <altera_avalon_jtag_uart_read+0x2c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 270:	10c00005 	stb	r3,0(r2)
 274:	10800044 	addi	r2,r2,1
 278:	003ff906 	br	260 <_gp+0xffff7e30>
    else if (ptr != buffer)
 27c:	11400226 	beq	r2,r5,288 <altera_avalon_jtag_uart_read+0x38>
      break;   
    
  }

  if (ptr != buffer)
    return ptr - buffer;
 280:	1145c83a 	sub	r2,r2,r5
 284:	f800283a 	ret

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
 288:	403ff526 	beq	r8,zero,260 <_gp+0xffff7e30>
 28c:	00000106 	br	294 <altera_avalon_jtag_uart_read+0x44>
      break;   
    
  }

  if (ptr != buffer)
 290:	117ffb1e 	bne	r2,r5,280 <_gp+0xffff7e50>
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
 294:	39d0000c 	andi	r7,r7,16384
 298:	3800021e 	bne	r7,zero,2a4 <altera_avalon_jtag_uart_read+0x54>
    return -EWOULDBLOCK;
  else
    return -EIO;
 29c:	00bffec4 	movi	r2,-5
 2a0:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
 2a4:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
 2a8:	f800283a 	ret

000002ac <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 2ac:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 2b0:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
 2b4:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 2b8:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 2bc:	2980072e 	bgeu	r5,r6,2dc <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 2c0:	38c00037 	ldwio	r3,0(r7)
 2c4:	18ffffec 	andhi	r3,r3,65535
 2c8:	183ffc26 	beq	r3,zero,2bc <_gp+0xffff7e8c>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 2cc:	28c00007 	ldb	r3,0(r5)
 2d0:	20c00035 	stwio	r3,0(r4)
 2d4:	29400044 	addi	r5,r5,1
 2d8:	003ff806 	br	2bc <_gp+0xffff7e8c>

  return count;
}
 2dc:	f800283a 	ret

000002e0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 2e0:	f800283a 	ret

000002e4 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
 2e4:	3005883a 	mov	r2,r6
 2e8:	f800283a 	ret

000002ec <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 2ec:	f800283a 	ret

000002f0 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 2f0:	000170fa 	wrctl	ienable,zero
 2f4:	f800283a 	ret

000002f8 <strlen>:
 2f8:	208000cc 	andi	r2,r4,3
 2fc:	10002026 	beq	r2,zero,380 <strlen+0x88>
 300:	20800007 	ldb	r2,0(r4)
 304:	10002026 	beq	r2,zero,388 <strlen+0x90>
 308:	2005883a 	mov	r2,r4
 30c:	00000206 	br	318 <strlen+0x20>
 310:	10c00007 	ldb	r3,0(r2)
 314:	18001826 	beq	r3,zero,378 <strlen+0x80>
 318:	10800044 	addi	r2,r2,1
 31c:	10c000cc 	andi	r3,r2,3
 320:	183ffb1e 	bne	r3,zero,310 <_gp+0xffff7ee0>
 324:	10c00017 	ldw	r3,0(r2)
 328:	01ffbff4 	movhi	r7,65279
 32c:	39ffbfc4 	addi	r7,r7,-257
 330:	00ca303a 	nor	r5,zero,r3
 334:	01a02074 	movhi	r6,32897
 338:	19c7883a 	add	r3,r3,r7
 33c:	31a02004 	addi	r6,r6,-32640
 340:	1946703a 	and	r3,r3,r5
 344:	1986703a 	and	r3,r3,r6
 348:	1800091e 	bne	r3,zero,370 <strlen+0x78>
 34c:	10800104 	addi	r2,r2,4
 350:	10c00017 	ldw	r3,0(r2)
 354:	19cb883a 	add	r5,r3,r7
 358:	00c6303a 	nor	r3,zero,r3
 35c:	28c6703a 	and	r3,r5,r3
 360:	1986703a 	and	r3,r3,r6
 364:	183ff926 	beq	r3,zero,34c <_gp+0xffff7f1c>
 368:	00000106 	br	370 <strlen+0x78>
 36c:	10800044 	addi	r2,r2,1
 370:	10c00007 	ldb	r3,0(r2)
 374:	183ffd1e 	bne	r3,zero,36c <_gp+0xffff7f3c>
 378:	1105c83a 	sub	r2,r2,r4
 37c:	f800283a 	ret
 380:	2005883a 	mov	r2,r4
 384:	003fe706 	br	324 <_gp+0xffff7ef4>
 388:	0005883a 	mov	r2,zero
 38c:	f800283a 	ret
