
hello_world_modified.elf:     file format elf32-littlenios2
hello_world_modified.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000002b8 memsz 0x000002b8 flags r-x
    LOAD off    0x000012d8 vaddr 0x000002d8 paddr 0x000002dc align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x000012e0 vaddr 0x000002e0 paddr 0x000002e0 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00000020  00000020  000012dc  2**0
                  CONTENTS
  2 .text         000002a0  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000018  000002c0  000002c0  000012c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000004  000002d8  000002dc  000012d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  000002e0  000002e0  000012e0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  000002ec  000002ec  000012dc  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000012dc  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000168  00000000  00000000  00001300  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00000b0d  00000000  00000000  00001468  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000659  00000000  00000000  00001f75  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000734  00000000  00000000  000025ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000190  00000000  00000000  00002d04  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000605  00000000  00000000  00002e94  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000012a  00000000  00000000  00003499  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  000035c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000088  00000000  00000000  000035d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000043da  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000f  00000000  00000000  000043dd  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000043ec  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000043ed  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  000043ee  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  000043f7  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  00004400  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000008  00000000  00000000  00004409  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000020  00000000  00000000  00004411  2**0
                  CONTENTS, READONLY
 26 .jdi          00004255  00000000  00000000  00004431  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00035018  00000000  00000000  00008686  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000020 l    d  .text	00000000 .text
000002c0 l    d  .rodata	00000000 .rodata
000002d8 l    d  .rwdata	00000000 .rwdata
000002e0 l    d  .bss	00000000 .bss
000002ec l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../hello_world_modified_bsp//obj/HAL/src/crt0.o
00000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 strlen.c
0000015c g     F .text	0000002c alt_main
000002dc g       *ABS*	00000000 __flash_rwdata_start
00000188 g     F .text	00000038 alt_putstr
000002d8 g     O .rwdata	00000004 jtag_uart
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
000002e4 g     O .bss	00000004 alt_argv
000082d8 g       *ABS*	00000000 _gp
000002ec g       *ABS*	00000000 __bss_end
00000218 g     F .text	00000004 alt_dcache_flush_all
000002dc g       *ABS*	00000000 __ram_rwdata_end
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory
000002d8 g       *ABS*	00000000 __ram_rodata_end
000002ec g       *ABS*	00000000 end
00008000 g       *ABS*	00000000 __alt_stack_pointer
000001e4 g     F .text	00000034 altera_avalon_jtag_uart_write
00000020 g     F .text	0000003c _start
000001e0 g     F .text	00000004 alt_sys_init
000002d8 g       *ABS*	00000000 __ram_rwdata_start
000002c0 g       *ABS*	00000000 __ram_rodata_start
000002ec g       *ABS*	00000000 __alt_stack_base
000002e0 g       *ABS*	00000000 __bss_start
0000005c g     F .text	00000020 main
000002e0 g     O .bss	00000004 alt_envp
000002c0 g       *ABS*	00000000 __flash_rodata_start
000001c0 g     F .text	00000020 alt_irq_init
000002e8 g     O .bss	00000004 alt_argc
00000020 g       *ABS*	00000000 __ram_exceptions_start
000002dc g       *ABS*	00000000 _edata
000002ec g       *ABS*	00000000 _end
00000020 g       *ABS*	00000000 __ram_exceptions_end
00000220 g     F .text	00000008 altera_nios2_qsys_irq_init
00008000 g       *ABS*	00000000 __alt_data_end
0000000c g       .entry	00000000 _exit
00000228 g     F .text	00000098 strlen
0000021c g     F .text	00000004 alt_icache_flush_all
0000007c g     F .text	000000e0 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08400814 	ori	at,at,32
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .text:

00000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  20:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
  24:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
  28:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
  2c:	d6a0b614 	ori	gp,gp,33496
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  30:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
  34:	1080b814 	ori	r2,r2,736

    movhi r3, %hi(__bss_end)
  38:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
  3c:	18c0bb14 	ori	r3,r3,748

    beq r2, r3, 1f
  40:	10c00326 	beq	r2,r3,50 <_start+0x30>

0:
    stw zero, (r2)
  44:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  48:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  4c:	10fffd36 	bltu	r2,r3,44 <_gp+0xffff7d6c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  50:	000007c0 	call	7c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  54:	000015c0 	call	15c <alt_main>

00000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  58:	003fff06 	br	58 <_gp+0xffff7d80>

0000005c <main>:
#define leds (char *) 0x9000


int main()
{ 
  alt_putstr("Hello from Nios II!\n");
  5c:	01000034 	movhi	r4,0
#define switches (volatile char *) 0x9010
#define leds (char *) 0x9000


int main()
{ 
  60:	deffff04 	addi	sp,sp,-4
  alt_putstr("Hello from Nios II!\n");
  64:	2100b004 	addi	r4,r4,704
#define switches (volatile char *) 0x9010
#define leds (char *) 0x9000


int main()
{ 
  68:	dfc00015 	stw	ra,0(sp)
  alt_putstr("Hello from Nios II!\n");
  6c:	00001880 	call	188 <alt_putstr>
  while (1) {
    		  *leds = *switches;
  70:	00a40414 	movui	r2,36880
  74:	10c00003 	ldbu	r3,0(r2)
  78:	003ffe06 	br	74 <_gp+0xffff7d9c>

0000007c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  7c:	deffff04 	addi	sp,sp,-4
  80:	01000034 	movhi	r4,0
  84:	01400034 	movhi	r5,0
  88:	dfc00015 	stw	ra,0(sp)
  8c:	2100b604 	addi	r4,r4,728
  90:	2940b704 	addi	r5,r5,732

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  94:	2140061e 	bne	r4,r5,b0 <alt_load+0x34>
  98:	01000034 	movhi	r4,0
  9c:	01400034 	movhi	r5,0
  a0:	21000804 	addi	r4,r4,32
  a4:	29400804 	addi	r5,r5,32
  a8:	2140121e 	bne	r4,r5,f4 <alt_load+0x78>
  ac:	00000b06 	br	dc <alt_load+0x60>
  b0:	00c00034 	movhi	r3,0
  b4:	18c0b704 	addi	r3,r3,732
  b8:	1907c83a 	sub	r3,r3,r4
  bc:	0005883a 	mov	r2,zero
  {
    while( to != end )
  c0:	10fff526 	beq	r2,r3,98 <_gp+0xffff7dc0>
    {
      *to++ = *from++;
  c4:	114f883a 	add	r7,r2,r5
  c8:	39c00017 	ldw	r7,0(r7)
  cc:	110d883a 	add	r6,r2,r4
  d0:	10800104 	addi	r2,r2,4
  d4:	31c00015 	stw	r7,0(r6)
  d8:	003ff906 	br	c0 <_gp+0xffff7de8>
  dc:	01000034 	movhi	r4,0
  e0:	01400034 	movhi	r5,0
  e4:	2100b004 	addi	r4,r4,704
  e8:	2940b004 	addi	r5,r5,704

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  ec:	2140101e 	bne	r4,r5,130 <alt_load+0xb4>
  f0:	00000b06 	br	120 <alt_load+0xa4>
  f4:	00c00034 	movhi	r3,0
  f8:	18c00804 	addi	r3,r3,32
  fc:	1907c83a 	sub	r3,r3,r4
 100:	0005883a 	mov	r2,zero
  {
    while( to != end )
 104:	10fff526 	beq	r2,r3,dc <_gp+0xffff7e04>
    {
      *to++ = *from++;
 108:	114f883a 	add	r7,r2,r5
 10c:	39c00017 	ldw	r7,0(r7)
 110:	110d883a 	add	r6,r2,r4
 114:	10800104 	addi	r2,r2,4
 118:	31c00015 	stw	r7,0(r6)
 11c:	003ff906 	br	104 <_gp+0xffff7e2c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 120:	00002180 	call	218 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 124:	dfc00017 	ldw	ra,0(sp)
 128:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 12c:	000021c1 	jmpi	21c <alt_icache_flush_all>
 130:	00c00034 	movhi	r3,0
 134:	18c0b604 	addi	r3,r3,728
 138:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 13c:	0005883a 	mov	r2,zero
  {
    while( to != end )
 140:	18bff726 	beq	r3,r2,120 <_gp+0xffff7e48>
    {
      *to++ = *from++;
 144:	114f883a 	add	r7,r2,r5
 148:	39c00017 	ldw	r7,0(r7)
 14c:	110d883a 	add	r6,r2,r4
 150:	10800104 	addi	r2,r2,4
 154:	31c00015 	stw	r7,0(r6)
 158:	003ff906 	br	140 <_gp+0xffff7e68>

0000015c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 15c:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 160:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 164:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 168:	00001c00 	call	1c0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 16c:	00001e00 	call	1e0 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 170:	d1a00217 	ldw	r6,-32760(gp)
 174:	d1600317 	ldw	r5,-32756(gp)
 178:	d1200417 	ldw	r4,-32752(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 17c:	dfc00017 	ldw	ra,0(sp)
 180:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 184:	000005c1 	jmpi	5c <main>

00000188 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
 188:	defffe04 	addi	sp,sp,-8
 18c:	dc000015 	stw	r16,0(sp)
 190:	dfc00115 	stw	ra,4(sp)
 194:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 198:	00002280 	call	228 <strlen>
 19c:	01000034 	movhi	r4,0
 1a0:	000f883a 	mov	r7,zero
 1a4:	100d883a 	mov	r6,r2
 1a8:	800b883a 	mov	r5,r16
 1ac:	2100b604 	addi	r4,r4,728
#else
    return fputs(str, stdout);
#endif
#endif
}
 1b0:	dfc00117 	ldw	ra,4(sp)
 1b4:	dc000017 	ldw	r16,0(sp)
 1b8:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 1bc:	00001e41 	jmpi	1e4 <altera_avalon_jtag_uart_write>

000001c0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 1c0:	deffff04 	addi	sp,sp,-4
 1c4:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_PROCESSOR, nios2_processor);
 1c8:	00002200 	call	220 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 1cc:	00800044 	movi	r2,1
 1d0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 1d4:	dfc00017 	ldw	ra,0(sp)
 1d8:	dec00104 	addi	sp,sp,4
 1dc:	f800283a 	ret

000001e0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 1e0:	f800283a 	ret

000001e4 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 1e4:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 1e8:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
 1ec:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 1f0:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 1f4:	2980072e 	bgeu	r5,r6,214 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 1f8:	38c00037 	ldwio	r3,0(r7)
 1fc:	18ffffec 	andhi	r3,r3,65535
 200:	183ffc26 	beq	r3,zero,1f4 <_gp+0xffff7f1c>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 204:	28c00007 	ldb	r3,0(r5)
 208:	20c00035 	stwio	r3,0(r4)
 20c:	29400044 	addi	r5,r5,1
 210:	003ff806 	br	1f4 <_gp+0xffff7f1c>

  return count;
}
 214:	f800283a 	ret

00000218 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 218:	f800283a 	ret

0000021c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 21c:	f800283a 	ret

00000220 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 220:	000170fa 	wrctl	ienable,zero
 224:	f800283a 	ret

00000228 <strlen>:
 228:	208000cc 	andi	r2,r4,3
 22c:	10002026 	beq	r2,zero,2b0 <strlen+0x88>
 230:	20800007 	ldb	r2,0(r4)
 234:	10002026 	beq	r2,zero,2b8 <strlen+0x90>
 238:	2005883a 	mov	r2,r4
 23c:	00000206 	br	248 <strlen+0x20>
 240:	10c00007 	ldb	r3,0(r2)
 244:	18001826 	beq	r3,zero,2a8 <strlen+0x80>
 248:	10800044 	addi	r2,r2,1
 24c:	10c000cc 	andi	r3,r2,3
 250:	183ffb1e 	bne	r3,zero,240 <_gp+0xffff7f68>
 254:	10c00017 	ldw	r3,0(r2)
 258:	01ffbff4 	movhi	r7,65279
 25c:	39ffbfc4 	addi	r7,r7,-257
 260:	00ca303a 	nor	r5,zero,r3
 264:	01a02074 	movhi	r6,32897
 268:	19c7883a 	add	r3,r3,r7
 26c:	31a02004 	addi	r6,r6,-32640
 270:	1946703a 	and	r3,r3,r5
 274:	1986703a 	and	r3,r3,r6
 278:	1800091e 	bne	r3,zero,2a0 <strlen+0x78>
 27c:	10800104 	addi	r2,r2,4
 280:	10c00017 	ldw	r3,0(r2)
 284:	19cb883a 	add	r5,r3,r7
 288:	00c6303a 	nor	r3,zero,r3
 28c:	28c6703a 	and	r3,r5,r3
 290:	1986703a 	and	r3,r3,r6
 294:	183ff926 	beq	r3,zero,27c <_gp+0xffff7fa4>
 298:	00000106 	br	2a0 <strlen+0x78>
 29c:	10800044 	addi	r2,r2,1
 2a0:	10c00007 	ldb	r3,0(r2)
 2a4:	183ffd1e 	bne	r3,zero,29c <_gp+0xffff7fc4>
 2a8:	1105c83a 	sub	r2,r2,r4
 2ac:	f800283a 	ret
 2b0:	2005883a 	mov	r2,r4
 2b4:	003fe706 	br	254 <_gp+0xffff7f7c>
 2b8:	0005883a 	mov	r2,zero
 2bc:	f800283a 	ret
