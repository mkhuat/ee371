
count_binary_final.elf:     file format elf32-littlenios2
count_binary_final.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00001bf4 memsz 0x00001bf4 flags r-x
    LOAD off    0x00002c14 vaddr 0x00001c14 paddr 0x00001ee8 align 2**12
         filesz 0x000002d4 memsz 0x000002d4 flags rw-
    LOAD off    0x000031bc vaddr 0x000021bc paddr 0x000021bc align 2**12
         filesz 0x00000000 memsz 0x00000018 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00000020  00000020  00002ee8  2**0
                  CONTENTS
  2 .text         00001af4  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000100  00001b14  00001b14  00002b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002d4  00001c14  00001ee8  00002c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000018  000021bc  000021bc  000031bc  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  000021d4  000021d4  00002ee8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00002ee8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000520  00000000  00000000  00002f10  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00008624  00000000  00000000  00003430  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002b15  00000000  00000000  0000ba54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002ed2  00000000  00000000  0000e569  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000964  00000000  00000000  0001143c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000185b  00000000  00000000  00011da0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001e3a  00000000  00000000  000135fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00015438  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000288  00000000  00000000  00015478  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00016e26  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000f  00000000  00000000  00016e29  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00016e38  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00016e39  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  00016e3a  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  00016e43  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  00016e4c  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000008  00000000  00000000  00016e55  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000020  00000000  00000000  00016e5d  2**0
                  CONTENTS, READONLY
 26 .jdi          00004255  00000000  00000000  00016e7d  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00035018  00000000  00000000  0001b0d2  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000020 l    d  .text	00000000 .text
00001b14 l    d  .rodata	00000000 .rodata
00001c14 l    d  .rwdata	00000000 .rwdata
000021bc l    d  .bss	00000000 .bss
000021d4 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../count_binary_final_bsp//obj/HAL/src/crt0.o
00000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 count_binary.c
000021bc l     O .bss	00000001 count
0000005c l     F .text	00000024 lcd_init
00000080 l     F .text	00000058 initial_message
000000d8 l     F .text	00000020 count_led
000000f8 l     F .text	00000020 count_sevenseg
00000118 l     F .text	0000002c count_lcd
00000144 l     F .text	00000054 count_all
00000198 l     F .text	0000016c handle_button_press
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000072c l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00001c14 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00000ec4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00001030 l     F .text	00000020 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00001cf4 l     O .rwdata	0000002c jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000135c l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00001364 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000145c l     F .text	00000088 alt_open_fd.constprop.0
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000660 g     F .text	0000001c putchar
00000fb0 g     F .text	00000050 alt_main
0000067c g     F .text	00000080 _puts_r
00001ee8 g       *ABS*	00000000 __flash_rwdata_start
0000060c g     F .text	0000004c printf
00000000 g     F .entry	0000000c __reset
000021c0 g     O .bss	00000004 edge_capture
00000020 g       *ABS*	00000000 __flash_exceptions_start
000021c4 g     O .bss	00000004 errno
000021cc g     O .bss	00000004 alt_argv
00009ec8 g       *ABS*	00000000 _gp
00001000 g     F .text	00000030 usleep
00001d20 g     O .rwdata	00000180 alt_fd_list
00000658 g     F .text	00000008 _putchar_r
00001774 g     F .text	00000074 alt_find_dev
000014e4 g     F .text	00000074 alt_io_redirect
000006fc g     F .text	00000014 puts
00001178 g     F .text	0000005c altera_avalon_jtag_uart_read
000005d0 g     F .text	0000003c _printf_r
00000514 g     F .text	00000064 .hidden __udivsi3
00001ed0 g     O .rwdata	00000004 alt_max_fd
00001ec8 g     O .rwdata	00000004 _global_impure_ptr
000021d4 g       *ABS*	00000000 __bss_end
00001ea0 g     O .rwdata	00000028 alt_dev_null
00001358 g     F .text	00000004 alt_dcache_flush_all
00001ee8 g       *ABS*	00000000 __ram_rwdata_end
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory
00001ed4 g     O .rwdata	00000008 alt_dev_list
00001050 g     F .text	000000d4 write
00000dec g     F .text	00000058 _putc_r
00001c14 g       *ABS*	00000000 __ram_rodata_end
00000578 g     F .text	00000058 .hidden __umodsi3
000021d4 g       *ABS*	00000000 end
00008000 g       *ABS*	00000000 __alt_stack_pointer
000011d4 g     F .text	00000034 altera_avalon_jtag_uart_write
00000798 g     F .text	0000052c ___vfprintf_internal_r
00001970 g     F .text	00000190 __call_exitprocs
00000020 g     F .text	0000003c _start
00001144 g     F .text	00000014 alt_sys_init
00000e9c g     F .text	00000028 .hidden __mulsi3
00001c14 g       *ABS*	00000000 __ram_rwdata_start
00001b14 g       *ABS*	00000000 __ram_rodata_start
00001158 g     F .text	00000010 altera_avalon_jtag_uart_read_fd
00001894 g     F .text	0000008c alt_get_fd
00001208 g     F .text	00000088 alt_busy_sleep
00001940 g     F .text	00000030 memcmp
000021d4 g       *ABS*	00000000 __alt_stack_base
000017e8 g     F .text	000000ac alt_find_file
000013b4 g     F .text	000000a4 alt_dev_llist_insert
00000ce0 g     F .text	000000b8 __sfvwrite_small_dev
000021bc g       *ABS*	00000000 __bss_start
00000304 g     F .text	00000118 main
000021c8 g     O .bss	00000004 alt_envp
00001168 g     F .text	00000010 altera_avalon_jtag_uart_write_fd
00001ee4 g     O .rwdata	00000004 alt_errno
00000d98 g     F .text	00000054 putc
0000041c g     F .text	00000084 .hidden __divsi3
00001b14 g       *ABS*	00000000 __flash_rodata_start
00001124 g     F .text	00000020 alt_irq_init
00001710 g     F .text	0000005c alt_release_fd
00000e44 g     F .text	00000058 _write_r
00001ecc g     O .rwdata	00000004 _impure_ptr
000021d0 g     O .bss	00000004 alt_argc
00001edc g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00001ee8 g       *ABS*	00000000 _edata
000021d4 g       *ABS*	00000000 _end
00000020 g       *ABS*	00000000 __ram_exceptions_end
0000176c g     F .text	00000008 altera_nios2_qsys_irq_init
00001920 g     F .text	00000020 exit
000004a0 g     F .text	00000074 .hidden __modsi3
00008000 g       *ABS*	00000000 __alt_data_end
00001b00 g     F .text	00000014 _exit
00000710 g     F .text	0000001c strlen
00001558 g     F .text	000001b8 open
00001458 g     F .text	00000004 alt_icache_flush_all
00000cc4 g     F .text	0000001c __vfprintf_internal
00001290 g     F .text	000000c8 close
00000f2c g     F .text	00000084 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08400814 	ori	at,at,32
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .text:

00000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
      20:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
      24:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
      28:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
      2c:	d6a7b214 	ori	gp,gp,40648
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
      30:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
      34:	10886f14 	ori	r2,r2,8636

    movhi r3, %hi(__bss_end)
      38:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
      3c:	18c87514 	ori	r3,r3,8660

    beq r2, r3, 1f
      40:	10c00326 	beq	r2,r3,50 <_start+0x30>

0:
    stw zero, (r2)
      44:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
      48:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
      4c:	10fffd36 	bltu	r2,r3,44 <_gp+0xffff617c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
      50:	0000f2c0 	call	f2c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
      54:	0000fb00 	call	fb0 <alt_main>

00000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
      58:	003fff06 	br	58 <_gp+0xffff6190>

0000005c <lcd_init>:
 * count_<device>() -- Implements the counting on the respective device.
 * handle_button_press() -- Determines what to do when one of the buttons
 * is pressed.
 */
static void lcd_init( FILE *lcd )
{
      5c:	defffe04 	addi	sp,sp,-8
      60:	df000115 	stw	fp,4(sp)
      64:	df000104 	addi	fp,sp,4
      68:	e13fff15 	stw	r4,-4(fp)
    /* If the LCD Display exists, write a simple message on the first line. */
    LCD_PRINTF(lcd, "%c%s Counting will be displayed below...", ESC,
               ESC_TOP_LEFT);
}
      6c:	0001883a 	nop
      70:	e037883a 	mov	sp,fp
      74:	df000017 	ldw	fp,0(sp)
      78:	dec00104 	addi	sp,sp,4
      7c:	f800283a 	ret

00000080 <initial_message>:

static void initial_message()
{
      80:	defffe04 	addi	sp,sp,-8
      84:	dfc00115 	stw	ra,4(sp)
      88:	df000015 	stw	fp,0(sp)
      8c:	d839883a 	mov	fp,sp
    printf("\n\n**************************\n");
      90:	01000034 	movhi	r4,0
      94:	2106c504 	addi	r4,r4,6932
      98:	00006fc0 	call	6fc <puts>
    printf("* Hello from Nios II!    *\n");
      9c:	01000034 	movhi	r4,0
      a0:	2106cd04 	addi	r4,r4,6964
      a4:	00006fc0 	call	6fc <puts>
    printf("* Counting from 00 to ff *\n");
      a8:	01000034 	movhi	r4,0
      ac:	2106d404 	addi	r4,r4,6992
      b0:	00006fc0 	call	6fc <puts>
    printf("**************************\n");
      b4:	01000034 	movhi	r4,0
      b8:	2106db04 	addi	r4,r4,7020
      bc:	00006fc0 	call	6fc <puts>
}
      c0:	0001883a 	nop
      c4:	e037883a 	mov	sp,fp
      c8:	dfc00117 	ldw	ra,4(sp)
      cc:	df000017 	ldw	fp,0(sp)
      d0:	dec00204 	addi	sp,sp,8
      d4:	f800283a 	ret

000000d8 <count_led>:
 * Illuminate LEDs with the value of 'count', if they
 * exist in the system
 */

static void count_led()
{
      d8:	deffff04 	addi	sp,sp,-4
      dc:	df000015 	stw	fp,0(sp)
      e0:	d839883a 	mov	fp,sp
    IOWR_ALTERA_AVALON_PIO_DATA(
        LED_PIO_BASE,
        count
        );
#endif
}
      e4:	0001883a 	nop
      e8:	e037883a 	mov	sp,fp
      ec:	df000017 	ldw	fp,0(sp)
      f0:	dec00104 	addi	sp,sp,4
      f4:	f800283a 	ret

000000f8 <count_sevenseg>:
 * 
 * Display value of 'count' on the Seven Segment Display
 */

static void count_sevenseg()
{
      f8:	deffff04 	addi	sp,sp,-4
      fc:	df000015 	stw	fp,0(sp)
     100:	d839883a 	mov	fp,sp
#ifdef SEVEN_SEG_PIO_BASE
    sevenseg_set_hex(count);
#endif
}
     104:	0001883a 	nop
     108:	e037883a 	mov	sp,fp
     10c:	df000017 	ldw	fp,0(sp)
     110:	dec00104 	addi	sp,sp,4
     114:	f800283a 	ret

00000118 <count_lcd>:
 * is treated as an I/O device (i.e.: using fprintf).  You
 * can read more about HAL drivers <link/reference here>.
 */

static void count_lcd( void* arg )
{
     118:	defffd04 	addi	sp,sp,-12
     11c:	df000215 	stw	fp,8(sp)
     120:	df000204 	addi	fp,sp,8
     124:	e13fff15 	stw	r4,-4(fp)
    FILE* __attribute__ ((unused))  lcd;  /* Attribute suppresses "unused variable" warning. */
    lcd = (FILE*) arg;
     128:	e0bfff17 	ldw	r2,-4(fp)
     12c:	e0bffe15 	stw	r2,-8(fp)
    LCD_PRINTF(lcd, "%c%s 0x%x\n", ESC, ESC_COL2_INDENT5, count);
}
     130:	0001883a 	nop
     134:	e037883a 	mov	sp,fp
     138:	df000017 	ldw	fp,0(sp)
     13c:	dec00104 	addi	sp,sp,4
     140:	f800283a 	ret

00000144 <count_all>:

/* count_all merely combines all three peripherals counting */

static void count_all( void* arg )
{
     144:	defffd04 	addi	sp,sp,-12
     148:	dfc00215 	stw	ra,8(sp)
     14c:	df000115 	stw	fp,4(sp)
     150:	df000104 	addi	fp,sp,4
     154:	e13fff15 	stw	r4,-4(fp)
    count_led();
     158:	00000d80 	call	d8 <count_led>
    count_sevenseg();
     15c:	00000f80 	call	f8 <count_sevenseg>
    count_lcd( arg );
     160:	e13fff17 	ldw	r4,-4(fp)
     164:	00001180 	call	118 <count_lcd>
    printf("%02x,  ", count);
     168:	d0a0bd03 	ldbu	r2,-32012(gp)
     16c:	10803fcc 	andi	r2,r2,255
     170:	100b883a 	mov	r5,r2
     174:	01000034 	movhi	r4,0
     178:	2106e204 	addi	r4,r4,7048
     17c:	000060c0 	call	60c <printf>
}
     180:	0001883a 	nop
     184:	e037883a 	mov	sp,fp
     188:	dfc00117 	ldw	ra,4(sp)
     18c:	df000017 	ldw	fp,0(sp)
     190:	dec00204 	addi	sp,sp,8
     194:	f800283a 	ret

00000198 <handle_button_press>:
  

static void handle_button_press(alt_u8 type, FILE *lcd)
{
     198:	defffc04 	addi	sp,sp,-16
     19c:	dfc00315 	stw	ra,12(sp)
     1a0:	df000215 	stw	fp,8(sp)
     1a4:	df000204 	addi	fp,sp,8
     1a8:	2005883a 	mov	r2,r4
     1ac:	e17fff15 	stw	r5,-4(fp)
     1b0:	e0bffe05 	stb	r2,-8(fp)
    /* Button press actions while counting. */
    if (type == 'c')
     1b4:	e0bffe03 	ldbu	r2,-8(fp)
     1b8:	108018d8 	cmpnei	r2,r2,99
     1bc:	10001d1e 	bne	r2,zero,234 <handle_button_press+0x9c>
    {
        switch (edge_capture) 
     1c0:	00800034 	movhi	r2,0
     1c4:	10887004 	addi	r2,r2,8640
     1c8:	10800017 	ldw	r2,0(r2)
     1cc:	10c000a0 	cmpeqi	r3,r2,2
     1d0:	18000c1e 	bne	r3,zero,204 <handle_button_press+0x6c>
     1d4:	10c000c8 	cmpgei	r3,r2,3
     1d8:	1800031e 	bne	r3,zero,1e8 <handle_button_press+0x50>
     1dc:	10800060 	cmpeqi	r2,r2,1
     1e0:	1000061e 	bne	r2,zero,1fc <handle_button_press+0x64>
     1e4:	00000f06 	br	224 <handle_button_press+0x8c>
     1e8:	10c00120 	cmpeqi	r3,r2,4
     1ec:	1800071e 	bne	r3,zero,20c <handle_button_press+0x74>
     1f0:	10800220 	cmpeqi	r2,r2,8
     1f4:	1000081e 	bne	r2,zero,218 <handle_button_press+0x80>
     1f8:	00000a06 	br	224 <handle_button_press+0x8c>
        {
            /* Button 1:  Output counting to LED only. */
        case 0x1:
            count_led();
     1fc:	00000d80 	call	d8 <count_led>
            break;
     200:	00003a06 	br	2ec <handle_button_press+0x154>
            /* Button 2:  Output counting to SEVEN SEG only. */
        case 0x2:
            count_sevenseg();
     204:	00000f80 	call	f8 <count_sevenseg>
            break;
     208:	00003806 	br	2ec <handle_button_press+0x154>
            /* Button 3:  Output counting to D only. */
        case 0x4:
            count_lcd( lcd );
     20c:	e13fff17 	ldw	r4,-4(fp)
     210:	00001180 	call	118 <count_lcd>
            break;
     214:	00003506 	br	2ec <handle_button_press+0x154>
            /* Button 4:  Output counting to LED, SEVEN_SEG, and D. */ 
        case 0x8:
            count_all( lcd );
     218:	e13fff17 	ldw	r4,-4(fp)
     21c:	00001440 	call	144 <count_all>
            break;
     220:	00003206 	br	2ec <handle_button_press+0x154>
            /* If value ends up being something different (shouldn't) do
               same as 8. */
        default:
            count_all( lcd );
     224:	e13fff17 	ldw	r4,-4(fp)
     228:	00001440 	call	144 <count_all>
            break;
     22c:	0001883a 	nop
     230:	00002e06 	br	2ec <handle_button_press+0x154>
        }
    }
    /* If 'type' is anything else, assume we're "waiting"...*/
    else
    {
        switch (edge_capture)
     234:	00800034 	movhi	r2,0
     238:	10887004 	addi	r2,r2,8640
     23c:	10800017 	ldw	r2,0(r2)
     240:	10c000a0 	cmpeqi	r3,r2,2
     244:	1800111e 	bne	r3,zero,28c <handle_button_press+0xf4>
     248:	10c000c8 	cmpgei	r3,r2,3
     24c:	1800031e 	bne	r3,zero,25c <handle_button_press+0xc4>
     250:	10800060 	cmpeqi	r2,r2,1
     254:	1000061e 	bne	r2,zero,270 <handle_button_press+0xd8>
     258:	00002106 	br	2e0 <handle_button_press+0x148>
     25c:	10c00120 	cmpeqi	r3,r2,4
     260:	1800111e 	bne	r3,zero,2a8 <handle_button_press+0x110>
     264:	10800220 	cmpeqi	r2,r2,8
     268:	1000161e 	bne	r2,zero,2c4 <handle_button_press+0x12c>
     26c:	00001c06 	br	2e0 <handle_button_press+0x148>
        {
        case 0x1:
            printf( "Button 1\n");
     270:	01000034 	movhi	r4,0
     274:	2106e404 	addi	r4,r4,7056
     278:	00006fc0 	call	6fc <puts>
            edge_capture = 0;
     27c:	00800034 	movhi	r2,0
     280:	10887004 	addi	r2,r2,8640
     284:	10000015 	stw	zero,0(r2)
            break;
     288:	00001806 	br	2ec <handle_button_press+0x154>
        case 0x2:
            printf( "Button 2\n");
     28c:	01000034 	movhi	r4,0
     290:	2106e704 	addi	r4,r4,7068
     294:	00006fc0 	call	6fc <puts>
            edge_capture = 0;
     298:	00800034 	movhi	r2,0
     29c:	10887004 	addi	r2,r2,8640
     2a0:	10000015 	stw	zero,0(r2)
            break;
     2a4:	00001106 	br	2ec <handle_button_press+0x154>
        case 0x4:
            printf( "Button 3\n");
     2a8:	01000034 	movhi	r4,0
     2ac:	2106ea04 	addi	r4,r4,7080
     2b0:	00006fc0 	call	6fc <puts>
            edge_capture = 0;
     2b4:	00800034 	movhi	r2,0
     2b8:	10887004 	addi	r2,r2,8640
     2bc:	10000015 	stw	zero,0(r2)
            break;
     2c0:	00000a06 	br	2ec <handle_button_press+0x154>
        case 0x8:
            printf( "Button 4\n");
     2c4:	01000034 	movhi	r4,0
     2c8:	2106ed04 	addi	r4,r4,7092
     2cc:	00006fc0 	call	6fc <puts>
            edge_capture = 0;
     2d0:	00800034 	movhi	r2,0
     2d4:	10887004 	addi	r2,r2,8640
     2d8:	10000015 	stw	zero,0(r2)
            break;
     2dc:	00000306 	br	2ec <handle_button_press+0x154>
        default:
            printf( "Button press UNKNOWN!!\n");
     2e0:	01000034 	movhi	r4,0
     2e4:	2106f004 	addi	r4,r4,7104
     2e8:	00006fc0 	call	6fc <puts>
        }
    }
}
     2ec:	0001883a 	nop
     2f0:	e037883a 	mov	sp,fp
     2f4:	dfc00117 	ldw	ra,4(sp)
     2f8:	df000017 	ldw	fp,0(sp)
     2fc:	dec00204 	addi	sp,sp,8
     300:	f800283a 	ret

00000304 <main>:
 * NOTE:  References to Buttons 1-4 correspond to SW0-SW3 on the Development   *
 * Board.                                                                      *
 ******************************************************************************/

int main(void)
{ 
     304:	defffb04 	addi	sp,sp,-20
     308:	dfc00415 	stw	ra,16(sp)
     30c:	df000315 	stw	fp,12(sp)
     310:	df000304 	addi	fp,sp,12
    int i;
    int  __attribute__ ((unused))  wait_time;  /* Attribute suppresses "var set but not used" warning. */
    FILE * lcd;

    count = 0;
     314:	d020bd05 	stb	zero,-32012(gp)

    /* Initialize the LCD, if there is one.
     */
    lcd = LCD_OPEN();
     318:	e03ffe15 	stw	zero,-8(fp)
    if(lcd != NULL) {lcd_init( lcd );}
     31c:	e0bffe17 	ldw	r2,-8(fp)
     320:	10000226 	beq	r2,zero,32c <main+0x28>
     324:	e13ffe17 	ldw	r4,-8(fp)
     328:	000005c0 	call	5c <lcd_init>
    init_button_pio();
#endif

/* Initial message to output. */

    initial_message();
     32c:	00000800 	call	80 <initial_message>

/* Continue 0-ff counting loop. */

    while( 1 ) 
    {
        usleep(100000);
     330:	010000b4 	movhi	r4,2
     334:	2121a804 	addi	r4,r4,-31072
     338:	00010000 	call	1000 <usleep>
        if (edge_capture != 0)
     33c:	00800034 	movhi	r2,0
     340:	10887004 	addi	r2,r2,8640
     344:	10800017 	ldw	r2,0(r2)
     348:	10000426 	beq	r2,zero,35c <main+0x58>
        {
            /* Handle button presses while counting... */
            handle_button_press('c', lcd);
     34c:	e17ffe17 	ldw	r5,-8(fp)
     350:	010018c4 	movi	r4,99
     354:	00001980 	call	198 <handle_button_press>
     358:	00000206 	br	364 <main+0x60>
        }
        /* If no button presses, try to output counting to all. */
        else
        {
            count_all( lcd );
     35c:	e13ffe17 	ldw	r4,-8(fp)
     360:	00001440 	call	144 <count_all>
        }
        /*
         * If done counting, wait about 7 seconds...
         * detect button presses while waiting.
         */
        if( count == 0xff )
     364:	d0a0bd03 	ldbu	r2,-32012(gp)
     368:	10803fcc 	andi	r2,r2,255
     36c:	10803fd8 	cmpnei	r2,r2,255
     370:	1000261e 	bne	r2,zero,40c <main+0x108>
        {
            LCD_PRINTF(lcd, "%c%s %c%s %c%s Waiting...\n", ESC, ESC_TOP_LEFT,
                       ESC, ESC_CLEAR, ESC, ESC_COL1_INDENT5);
            printf("\nWaiting...");
     374:	01000034 	movhi	r4,0
     378:	2106f604 	addi	r4,r4,7128
     37c:	000060c0 	call	60c <printf>
            edge_capture = 0; /* Reset to 0 during wait/pause period. */
     380:	00800034 	movhi	r2,0
     384:	10887004 	addi	r2,r2,8640
     388:	10000015 	stw	zero,0(r2)

            /* Clear the 2nd. line of the LCD screen. */
            LCD_PRINTF(lcd, "%c%s, %c%s", ESC, ESC_COL2_INDENT5, ESC,
                       ESC_CLEAR);
            wait_time = 0;
     38c:	e03fff15 	stw	zero,-4(fp)
            for (i = 0; i<70; ++i)
     390:	e03ffd15 	stw	zero,-12(fp)
     394:	00001706 	br	3f4 <main+0xf0>
            {
                printf(".");
     398:	01000b84 	movi	r4,46
     39c:	00006600 	call	660 <putchar>
                wait_time = i/10;
     3a0:	e0bffd17 	ldw	r2,-12(fp)
     3a4:	01400284 	movi	r5,10
     3a8:	1009883a 	mov	r4,r2
     3ac:	000041c0 	call	41c <__divsi3>
     3b0:	e0bfff15 	stw	r2,-4(fp)
                LCD_PRINTF(lcd, "%c%s %ds\n", ESC, ESC_COL2_INDENT5,
                    wait_time+1);

                if (edge_capture != 0) 
     3b4:	00800034 	movhi	r2,0
     3b8:	10887004 	addi	r2,r2,8640
     3bc:	10800017 	ldw	r2,0(r2)
     3c0:	10000626 	beq	r2,zero,3dc <main+0xd8>
                {
                    printf( "\nYou pushed:  " );
     3c4:	01000034 	movhi	r4,0
     3c8:	2106f904 	addi	r4,r4,7140
     3cc:	000060c0 	call	60c <printf>
                    handle_button_press('w', lcd);
     3d0:	e17ffe17 	ldw	r5,-8(fp)
     3d4:	01001dc4 	movi	r4,119
     3d8:	00001980 	call	198 <handle_button_press>
                }
                usleep(100000); /* Sleep for 0.1s. */
     3dc:	010000b4 	movhi	r4,2
     3e0:	2121a804 	addi	r4,r4,-31072
     3e4:	00010000 	call	1000 <usleep>

            /* Clear the 2nd. line of the LCD screen. */
            LCD_PRINTF(lcd, "%c%s, %c%s", ESC, ESC_COL2_INDENT5, ESC,
                       ESC_CLEAR);
            wait_time = 0;
            for (i = 0; i<70; ++i)
     3e8:	e0bffd17 	ldw	r2,-12(fp)
     3ec:	10800044 	addi	r2,r2,1
     3f0:	e0bffd15 	stw	r2,-12(fp)
     3f4:	e0bffd17 	ldw	r2,-12(fp)
     3f8:	10801190 	cmplti	r2,r2,70
     3fc:	103fe61e 	bne	r2,zero,398 <_gp+0xffff64d0>
                }
                usleep(100000); /* Sleep for 0.1s. */
            }
            /*  Output the "loop start" messages before looping, again.
             */
            initial_message();
     400:	00000800 	call	80 <initial_message>
            lcd_init( lcd );
     404:	e13ffe17 	ldw	r4,-8(fp)
     408:	000005c0 	call	5c <lcd_init>
        }
        count++;
     40c:	d0a0bd03 	ldbu	r2,-32012(gp)
     410:	10800044 	addi	r2,r2,1
     414:	d0a0bd05 	stb	r2,-32012(gp)
    }
     418:	003fc506 	br	330 <_gp+0xffff6468>

0000041c <__divsi3>:
     41c:	20001b16 	blt	r4,zero,48c <__divsi3+0x70>
     420:	000f883a 	mov	r7,zero
     424:	28001616 	blt	r5,zero,480 <__divsi3+0x64>
     428:	200d883a 	mov	r6,r4
     42c:	29001a2e 	bgeu	r5,r4,498 <__divsi3+0x7c>
     430:	00800804 	movi	r2,32
     434:	00c00044 	movi	r3,1
     438:	00000106 	br	440 <__divsi3+0x24>
     43c:	10000d26 	beq	r2,zero,474 <__divsi3+0x58>
     440:	294b883a 	add	r5,r5,r5
     444:	10bfffc4 	addi	r2,r2,-1
     448:	18c7883a 	add	r3,r3,r3
     44c:	293ffb36 	bltu	r5,r4,43c <_gp+0xffff6574>
     450:	0005883a 	mov	r2,zero
     454:	18000726 	beq	r3,zero,474 <__divsi3+0x58>
     458:	0005883a 	mov	r2,zero
     45c:	31400236 	bltu	r6,r5,468 <__divsi3+0x4c>
     460:	314dc83a 	sub	r6,r6,r5
     464:	10c4b03a 	or	r2,r2,r3
     468:	1806d07a 	srli	r3,r3,1
     46c:	280ad07a 	srli	r5,r5,1
     470:	183ffa1e 	bne	r3,zero,45c <_gp+0xffff6594>
     474:	38000126 	beq	r7,zero,47c <__divsi3+0x60>
     478:	0085c83a 	sub	r2,zero,r2
     47c:	f800283a 	ret
     480:	014bc83a 	sub	r5,zero,r5
     484:	39c0005c 	xori	r7,r7,1
     488:	003fe706 	br	428 <_gp+0xffff6560>
     48c:	0109c83a 	sub	r4,zero,r4
     490:	01c00044 	movi	r7,1
     494:	003fe306 	br	424 <_gp+0xffff655c>
     498:	00c00044 	movi	r3,1
     49c:	003fee06 	br	458 <_gp+0xffff6590>

000004a0 <__modsi3>:
     4a0:	20001716 	blt	r4,zero,500 <__modsi3+0x60>
     4a4:	000f883a 	mov	r7,zero
     4a8:	2005883a 	mov	r2,r4
     4ac:	28001216 	blt	r5,zero,4f8 <__modsi3+0x58>
     4b0:	2900162e 	bgeu	r5,r4,50c <__modsi3+0x6c>
     4b4:	01800804 	movi	r6,32
     4b8:	00c00044 	movi	r3,1
     4bc:	00000106 	br	4c4 <__modsi3+0x24>
     4c0:	30000a26 	beq	r6,zero,4ec <__modsi3+0x4c>
     4c4:	294b883a 	add	r5,r5,r5
     4c8:	31bfffc4 	addi	r6,r6,-1
     4cc:	18c7883a 	add	r3,r3,r3
     4d0:	293ffb36 	bltu	r5,r4,4c0 <_gp+0xffff65f8>
     4d4:	18000526 	beq	r3,zero,4ec <__modsi3+0x4c>
     4d8:	1806d07a 	srli	r3,r3,1
     4dc:	11400136 	bltu	r2,r5,4e4 <__modsi3+0x44>
     4e0:	1145c83a 	sub	r2,r2,r5
     4e4:	280ad07a 	srli	r5,r5,1
     4e8:	183ffb1e 	bne	r3,zero,4d8 <_gp+0xffff6610>
     4ec:	38000126 	beq	r7,zero,4f4 <__modsi3+0x54>
     4f0:	0085c83a 	sub	r2,zero,r2
     4f4:	f800283a 	ret
     4f8:	014bc83a 	sub	r5,zero,r5
     4fc:	003fec06 	br	4b0 <_gp+0xffff65e8>
     500:	0109c83a 	sub	r4,zero,r4
     504:	01c00044 	movi	r7,1
     508:	003fe706 	br	4a8 <_gp+0xffff65e0>
     50c:	00c00044 	movi	r3,1
     510:	003ff106 	br	4d8 <_gp+0xffff6610>

00000514 <__udivsi3>:
     514:	200d883a 	mov	r6,r4
     518:	2900152e 	bgeu	r5,r4,570 <__udivsi3+0x5c>
     51c:	28001416 	blt	r5,zero,570 <__udivsi3+0x5c>
     520:	00800804 	movi	r2,32
     524:	00c00044 	movi	r3,1
     528:	00000206 	br	534 <__udivsi3+0x20>
     52c:	10000e26 	beq	r2,zero,568 <__udivsi3+0x54>
     530:	28000516 	blt	r5,zero,548 <__udivsi3+0x34>
     534:	294b883a 	add	r5,r5,r5
     538:	10bfffc4 	addi	r2,r2,-1
     53c:	18c7883a 	add	r3,r3,r3
     540:	293ffa36 	bltu	r5,r4,52c <_gp+0xffff6664>
     544:	18000826 	beq	r3,zero,568 <__udivsi3+0x54>
     548:	0005883a 	mov	r2,zero
     54c:	31400236 	bltu	r6,r5,558 <__udivsi3+0x44>
     550:	314dc83a 	sub	r6,r6,r5
     554:	10c4b03a 	or	r2,r2,r3
     558:	1806d07a 	srli	r3,r3,1
     55c:	280ad07a 	srli	r5,r5,1
     560:	183ffa1e 	bne	r3,zero,54c <_gp+0xffff6684>
     564:	f800283a 	ret
     568:	0005883a 	mov	r2,zero
     56c:	f800283a 	ret
     570:	00c00044 	movi	r3,1
     574:	003ff406 	br	548 <_gp+0xffff6680>

00000578 <__umodsi3>:
     578:	2005883a 	mov	r2,r4
     57c:	2900122e 	bgeu	r5,r4,5c8 <__umodsi3+0x50>
     580:	28001116 	blt	r5,zero,5c8 <__umodsi3+0x50>
     584:	01800804 	movi	r6,32
     588:	00c00044 	movi	r3,1
     58c:	00000206 	br	598 <__umodsi3+0x20>
     590:	30000c26 	beq	r6,zero,5c4 <__umodsi3+0x4c>
     594:	28000516 	blt	r5,zero,5ac <__umodsi3+0x34>
     598:	294b883a 	add	r5,r5,r5
     59c:	31bfffc4 	addi	r6,r6,-1
     5a0:	18c7883a 	add	r3,r3,r3
     5a4:	293ffa36 	bltu	r5,r4,590 <_gp+0xffff66c8>
     5a8:	18000626 	beq	r3,zero,5c4 <__umodsi3+0x4c>
     5ac:	1806d07a 	srli	r3,r3,1
     5b0:	11400136 	bltu	r2,r5,5b8 <__umodsi3+0x40>
     5b4:	1145c83a 	sub	r2,r2,r5
     5b8:	280ad07a 	srli	r5,r5,1
     5bc:	183ffb1e 	bne	r3,zero,5ac <_gp+0xffff66e4>
     5c0:	f800283a 	ret
     5c4:	f800283a 	ret
     5c8:	00c00044 	movi	r3,1
     5cc:	003ff706 	br	5ac <_gp+0xffff66e4>

000005d0 <_printf_r>:
     5d0:	defffd04 	addi	sp,sp,-12
     5d4:	dfc00015 	stw	ra,0(sp)
     5d8:	d9800115 	stw	r6,4(sp)
     5dc:	d9c00215 	stw	r7,8(sp)
     5e0:	20c00217 	ldw	r3,8(r4)
     5e4:	01800034 	movhi	r6,0
     5e8:	31833804 	addi	r6,r6,3296
     5ec:	19800115 	stw	r6,4(r3)
     5f0:	280d883a 	mov	r6,r5
     5f4:	21400217 	ldw	r5,8(r4)
     5f8:	d9c00104 	addi	r7,sp,4
     5fc:	00007980 	call	798 <___vfprintf_internal_r>
     600:	dfc00017 	ldw	ra,0(sp)
     604:	dec00304 	addi	sp,sp,12
     608:	f800283a 	ret

0000060c <printf>:
     60c:	defffc04 	addi	sp,sp,-16
     610:	dfc00015 	stw	ra,0(sp)
     614:	d9400115 	stw	r5,4(sp)
     618:	d9800215 	stw	r6,8(sp)
     61c:	d9c00315 	stw	r7,12(sp)
     620:	00800034 	movhi	r2,0
     624:	1087b304 	addi	r2,r2,7884
     628:	10800017 	ldw	r2,0(r2)
     62c:	01400034 	movhi	r5,0
     630:	29433804 	addi	r5,r5,3296
     634:	10c00217 	ldw	r3,8(r2)
     638:	d9800104 	addi	r6,sp,4
     63c:	19400115 	stw	r5,4(r3)
     640:	200b883a 	mov	r5,r4
     644:	11000217 	ldw	r4,8(r2)
     648:	0000cc40 	call	cc4 <__vfprintf_internal>
     64c:	dfc00017 	ldw	ra,0(sp)
     650:	dec00404 	addi	sp,sp,16
     654:	f800283a 	ret

00000658 <_putchar_r>:
     658:	21800217 	ldw	r6,8(r4)
     65c:	0000dec1 	jmpi	dec <_putc_r>

00000660 <putchar>:
     660:	00800034 	movhi	r2,0
     664:	1087b304 	addi	r2,r2,7884
     668:	10800017 	ldw	r2,0(r2)
     66c:	200b883a 	mov	r5,r4
     670:	11800217 	ldw	r6,8(r2)
     674:	1009883a 	mov	r4,r2
     678:	0000dec1 	jmpi	dec <_putc_r>

0000067c <_puts_r>:
     67c:	defffd04 	addi	sp,sp,-12
     680:	dc000015 	stw	r16,0(sp)
     684:	2021883a 	mov	r16,r4
     688:	2809883a 	mov	r4,r5
     68c:	dfc00215 	stw	ra,8(sp)
     690:	dc400115 	stw	r17,4(sp)
     694:	2823883a 	mov	r17,r5
     698:	00007100 	call	710 <strlen>
     69c:	81400217 	ldw	r5,8(r16)
     6a0:	01000034 	movhi	r4,0
     6a4:	21033804 	addi	r4,r4,3296
     6a8:	29000115 	stw	r4,4(r5)
     6ac:	100f883a 	mov	r7,r2
     6b0:	880d883a 	mov	r6,r17
     6b4:	8009883a 	mov	r4,r16
     6b8:	0000ce00 	call	ce0 <__sfvwrite_small_dev>
     6bc:	00ffffc4 	movi	r3,-1
     6c0:	10c00926 	beq	r2,r3,6e8 <_puts_r+0x6c>
     6c4:	81400217 	ldw	r5,8(r16)
     6c8:	01800034 	movhi	r6,0
     6cc:	01c00044 	movi	r7,1
     6d0:	28800117 	ldw	r2,4(r5)
     6d4:	3186fd04 	addi	r6,r6,7156
     6d8:	8009883a 	mov	r4,r16
     6dc:	103ee83a 	callr	r2
     6e0:	10bfffe0 	cmpeqi	r2,r2,-1
     6e4:	0085c83a 	sub	r2,zero,r2
     6e8:	dfc00217 	ldw	ra,8(sp)
     6ec:	dc400117 	ldw	r17,4(sp)
     6f0:	dc000017 	ldw	r16,0(sp)
     6f4:	dec00304 	addi	sp,sp,12
     6f8:	f800283a 	ret

000006fc <puts>:
     6fc:	00800034 	movhi	r2,0
     700:	1087b304 	addi	r2,r2,7884
     704:	200b883a 	mov	r5,r4
     708:	11000017 	ldw	r4,0(r2)
     70c:	000067c1 	jmpi	67c <_puts_r>

00000710 <strlen>:
     710:	2005883a 	mov	r2,r4
     714:	10c00007 	ldb	r3,0(r2)
     718:	18000226 	beq	r3,zero,724 <strlen+0x14>
     71c:	10800044 	addi	r2,r2,1
     720:	003ffc06 	br	714 <_gp+0xffff684c>
     724:	1105c83a 	sub	r2,r2,r4
     728:	f800283a 	ret

0000072c <print_repeat>:
     72c:	defffb04 	addi	sp,sp,-20
     730:	dc800315 	stw	r18,12(sp)
     734:	dc400215 	stw	r17,8(sp)
     738:	dc000115 	stw	r16,4(sp)
     73c:	dfc00415 	stw	ra,16(sp)
     740:	2025883a 	mov	r18,r4
     744:	2823883a 	mov	r17,r5
     748:	d9800005 	stb	r6,0(sp)
     74c:	3821883a 	mov	r16,r7
     750:	04000a0e 	bge	zero,r16,77c <print_repeat+0x50>
     754:	88800117 	ldw	r2,4(r17)
     758:	01c00044 	movi	r7,1
     75c:	d80d883a 	mov	r6,sp
     760:	880b883a 	mov	r5,r17
     764:	9009883a 	mov	r4,r18
     768:	103ee83a 	callr	r2
     76c:	843fffc4 	addi	r16,r16,-1
     770:	103ff726 	beq	r2,zero,750 <_gp+0xffff6888>
     774:	00bfffc4 	movi	r2,-1
     778:	00000106 	br	780 <print_repeat+0x54>
     77c:	0005883a 	mov	r2,zero
     780:	dfc00417 	ldw	ra,16(sp)
     784:	dc800317 	ldw	r18,12(sp)
     788:	dc400217 	ldw	r17,8(sp)
     78c:	dc000117 	ldw	r16,4(sp)
     790:	dec00504 	addi	sp,sp,20
     794:	f800283a 	ret

00000798 <___vfprintf_internal_r>:
     798:	deffe504 	addi	sp,sp,-108
     79c:	d8c00804 	addi	r3,sp,32
     7a0:	ddc01815 	stw	r23,96(sp)
     7a4:	dd801715 	stw	r22,92(sp)
     7a8:	dd401615 	stw	r21,88(sp)
     7ac:	dd001515 	stw	r20,84(sp)
     7b0:	dcc01415 	stw	r19,80(sp)
     7b4:	dc801315 	stw	r18,76(sp)
     7b8:	dc401215 	stw	r17,72(sp)
     7bc:	dc001115 	stw	r16,68(sp)
     7c0:	dfc01a15 	stw	ra,104(sp)
     7c4:	df001915 	stw	fp,100(sp)
     7c8:	2029883a 	mov	r20,r4
     7cc:	2823883a 	mov	r17,r5
     7d0:	382d883a 	mov	r22,r7
     7d4:	d9800f15 	stw	r6,60(sp)
     7d8:	0021883a 	mov	r16,zero
     7dc:	d8000e15 	stw	zero,56(sp)
     7e0:	d8000a15 	stw	zero,40(sp)
     7e4:	002b883a 	mov	r21,zero
     7e8:	0027883a 	mov	r19,zero
     7ec:	0025883a 	mov	r18,zero
     7f0:	d8000c15 	stw	zero,48(sp)
     7f4:	d8000b15 	stw	zero,44(sp)
     7f8:	002f883a 	mov	r23,zero
     7fc:	d8c00915 	stw	r3,36(sp)
     800:	d8c00f17 	ldw	r3,60(sp)
     804:	19000003 	ldbu	r4,0(r3)
     808:	20803fcc 	andi	r2,r4,255
     80c:	1080201c 	xori	r2,r2,128
     810:	10bfe004 	addi	r2,r2,-128
     814:	10011e26 	beq	r2,zero,c90 <___vfprintf_internal_r+0x4f8>
     818:	00c00044 	movi	r3,1
     81c:	b8c01426 	beq	r23,r3,870 <___vfprintf_internal_r+0xd8>
     820:	1dc00216 	blt	r3,r23,82c <___vfprintf_internal_r+0x94>
     824:	b8000626 	beq	r23,zero,840 <___vfprintf_internal_r+0xa8>
     828:	00011506 	br	c80 <___vfprintf_internal_r+0x4e8>
     82c:	01400084 	movi	r5,2
     830:	b9401d26 	beq	r23,r5,8a8 <___vfprintf_internal_r+0x110>
     834:	014000c4 	movi	r5,3
     838:	b9402b26 	beq	r23,r5,8e8 <___vfprintf_internal_r+0x150>
     83c:	00011006 	br	c80 <___vfprintf_internal_r+0x4e8>
     840:	01400944 	movi	r5,37
     844:	1140fc26 	beq	r2,r5,c38 <___vfprintf_internal_r+0x4a0>
     848:	88800117 	ldw	r2,4(r17)
     84c:	d9000005 	stb	r4,0(sp)
     850:	01c00044 	movi	r7,1
     854:	d80d883a 	mov	r6,sp
     858:	880b883a 	mov	r5,r17
     85c:	a009883a 	mov	r4,r20
     860:	103ee83a 	callr	r2
     864:	1000d81e 	bne	r2,zero,bc8 <___vfprintf_internal_r+0x430>
     868:	84000044 	addi	r16,r16,1
     86c:	00010406 	br	c80 <___vfprintf_internal_r+0x4e8>
     870:	01400c04 	movi	r5,48
     874:	1140fa26 	beq	r2,r5,c60 <___vfprintf_internal_r+0x4c8>
     878:	01400944 	movi	r5,37
     87c:	11400a1e 	bne	r2,r5,8a8 <___vfprintf_internal_r+0x110>
     880:	d8800005 	stb	r2,0(sp)
     884:	88800117 	ldw	r2,4(r17)
     888:	b80f883a 	mov	r7,r23
     88c:	d80d883a 	mov	r6,sp
     890:	880b883a 	mov	r5,r17
     894:	a009883a 	mov	r4,r20
     898:	103ee83a 	callr	r2
     89c:	1000ca1e 	bne	r2,zero,bc8 <___vfprintf_internal_r+0x430>
     8a0:	84000044 	addi	r16,r16,1
     8a4:	0000f506 	br	c7c <___vfprintf_internal_r+0x4e4>
     8a8:	25fff404 	addi	r23,r4,-48
     8ac:	bdc03fcc 	andi	r23,r23,255
     8b0:	00c00244 	movi	r3,9
     8b4:	1dc00936 	bltu	r3,r23,8dc <___vfprintf_internal_r+0x144>
     8b8:	00bfffc4 	movi	r2,-1
     8bc:	90800426 	beq	r18,r2,8d0 <___vfprintf_internal_r+0x138>
     8c0:	01400284 	movi	r5,10
     8c4:	9009883a 	mov	r4,r18
     8c8:	0000e9c0 	call	e9c <__mulsi3>
     8cc:	00000106 	br	8d4 <___vfprintf_internal_r+0x13c>
     8d0:	0005883a 	mov	r2,zero
     8d4:	b8a5883a 	add	r18,r23,r2
     8d8:	0000e206 	br	c64 <___vfprintf_internal_r+0x4cc>
     8dc:	01400b84 	movi	r5,46
     8e0:	1140e426 	beq	r2,r5,c74 <___vfprintf_internal_r+0x4dc>
     8e4:	05c00084 	movi	r23,2
     8e8:	213ff404 	addi	r4,r4,-48
     8ec:	27003fcc 	andi	fp,r4,255
     8f0:	00c00244 	movi	r3,9
     8f4:	1f000936 	bltu	r3,fp,91c <___vfprintf_internal_r+0x184>
     8f8:	00bfffc4 	movi	r2,-1
     8fc:	98800426 	beq	r19,r2,910 <___vfprintf_internal_r+0x178>
     900:	01400284 	movi	r5,10
     904:	9809883a 	mov	r4,r19
     908:	0000e9c0 	call	e9c <__mulsi3>
     90c:	00000106 	br	914 <___vfprintf_internal_r+0x17c>
     910:	0005883a 	mov	r2,zero
     914:	e0a7883a 	add	r19,fp,r2
     918:	0000d906 	br	c80 <___vfprintf_internal_r+0x4e8>
     91c:	00c01b04 	movi	r3,108
     920:	10c0d226 	beq	r2,r3,c6c <___vfprintf_internal_r+0x4d4>
     924:	013fffc4 	movi	r4,-1
     928:	99000226 	beq	r19,r4,934 <___vfprintf_internal_r+0x19c>
     92c:	d8000b15 	stw	zero,44(sp)
     930:	00000106 	br	938 <___vfprintf_internal_r+0x1a0>
     934:	04c00044 	movi	r19,1
     938:	01001a44 	movi	r4,105
     93c:	11001626 	beq	r2,r4,998 <___vfprintf_internal_r+0x200>
     940:	20800916 	blt	r4,r2,968 <___vfprintf_internal_r+0x1d0>
     944:	010018c4 	movi	r4,99
     948:	11008826 	beq	r2,r4,b6c <___vfprintf_internal_r+0x3d4>
     94c:	01001904 	movi	r4,100
     950:	11001126 	beq	r2,r4,998 <___vfprintf_internal_r+0x200>
     954:	01001604 	movi	r4,88
     958:	1100c81e 	bne	r2,r4,c7c <___vfprintf_internal_r+0x4e4>
     95c:	00c00044 	movi	r3,1
     960:	d8c00e15 	stw	r3,56(sp)
     964:	00001506 	br	9bc <___vfprintf_internal_r+0x224>
     968:	01001cc4 	movi	r4,115
     96c:	11009826 	beq	r2,r4,bd0 <___vfprintf_internal_r+0x438>
     970:	20800416 	blt	r4,r2,984 <___vfprintf_internal_r+0x1ec>
     974:	01001bc4 	movi	r4,111
     978:	1100c01e 	bne	r2,r4,c7c <___vfprintf_internal_r+0x4e4>
     97c:	05400204 	movi	r21,8
     980:	00000f06 	br	9c0 <___vfprintf_internal_r+0x228>
     984:	01001d44 	movi	r4,117
     988:	11000d26 	beq	r2,r4,9c0 <___vfprintf_internal_r+0x228>
     98c:	01001e04 	movi	r4,120
     990:	11000a26 	beq	r2,r4,9bc <___vfprintf_internal_r+0x224>
     994:	0000b906 	br	c7c <___vfprintf_internal_r+0x4e4>
     998:	d8c00a17 	ldw	r3,40(sp)
     99c:	b7000104 	addi	fp,r22,4
     9a0:	18000726 	beq	r3,zero,9c0 <___vfprintf_internal_r+0x228>
     9a4:	df000d15 	stw	fp,52(sp)
     9a8:	b5c00017 	ldw	r23,0(r22)
     9ac:	b800080e 	bge	r23,zero,9d0 <___vfprintf_internal_r+0x238>
     9b0:	05efc83a 	sub	r23,zero,r23
     9b4:	02400044 	movi	r9,1
     9b8:	00000606 	br	9d4 <___vfprintf_internal_r+0x23c>
     9bc:	05400404 	movi	r21,16
     9c0:	b0c00104 	addi	r3,r22,4
     9c4:	d8c00d15 	stw	r3,52(sp)
     9c8:	b5c00017 	ldw	r23,0(r22)
     9cc:	d8000a15 	stw	zero,40(sp)
     9d0:	0013883a 	mov	r9,zero
     9d4:	d839883a 	mov	fp,sp
     9d8:	b8001726 	beq	r23,zero,a38 <___vfprintf_internal_r+0x2a0>
     9dc:	a80b883a 	mov	r5,r21
     9e0:	b809883a 	mov	r4,r23
     9e4:	da401015 	stw	r9,64(sp)
     9e8:	00005140 	call	514 <__udivsi3>
     9ec:	a80b883a 	mov	r5,r21
     9f0:	1009883a 	mov	r4,r2
     9f4:	102d883a 	mov	r22,r2
     9f8:	0000e9c0 	call	e9c <__mulsi3>
     9fc:	b885c83a 	sub	r2,r23,r2
     a00:	00c00244 	movi	r3,9
     a04:	da401017 	ldw	r9,64(sp)
     a08:	18800216 	blt	r3,r2,a14 <___vfprintf_internal_r+0x27c>
     a0c:	10800c04 	addi	r2,r2,48
     a10:	00000506 	br	a28 <___vfprintf_internal_r+0x290>
     a14:	d8c00e17 	ldw	r3,56(sp)
     a18:	18000226 	beq	r3,zero,a24 <___vfprintf_internal_r+0x28c>
     a1c:	10800dc4 	addi	r2,r2,55
     a20:	00000106 	br	a28 <___vfprintf_internal_r+0x290>
     a24:	108015c4 	addi	r2,r2,87
     a28:	e0800005 	stb	r2,0(fp)
     a2c:	b02f883a 	mov	r23,r22
     a30:	e7000044 	addi	fp,fp,1
     a34:	003fe806 	br	9d8 <_gp+0xffff6b10>
     a38:	e6efc83a 	sub	r23,fp,sp
     a3c:	9dc5c83a 	sub	r2,r19,r23
     a40:	0080090e 	bge	zero,r2,a68 <___vfprintf_internal_r+0x2d0>
     a44:	e085883a 	add	r2,fp,r2
     a48:	01400c04 	movi	r5,48
     a4c:	d8c00917 	ldw	r3,36(sp)
     a50:	e009883a 	mov	r4,fp
     a54:	e0c0032e 	bgeu	fp,r3,a64 <___vfprintf_internal_r+0x2cc>
     a58:	e7000044 	addi	fp,fp,1
     a5c:	21400005 	stb	r5,0(r4)
     a60:	e0bffa1e 	bne	fp,r2,a4c <_gp+0xffff6b84>
     a64:	e6efc83a 	sub	r23,fp,sp
     a68:	d8c00b17 	ldw	r3,44(sp)
     a6c:	4dd1883a 	add	r8,r9,r23
     a70:	922dc83a 	sub	r22,r18,r8
     a74:	18001626 	beq	r3,zero,ad0 <___vfprintf_internal_r+0x338>
     a78:	48000a26 	beq	r9,zero,aa4 <___vfprintf_internal_r+0x30c>
     a7c:	00800b44 	movi	r2,45
     a80:	d8800805 	stb	r2,32(sp)
     a84:	88800117 	ldw	r2,4(r17)
     a88:	01c00044 	movi	r7,1
     a8c:	d9800804 	addi	r6,sp,32
     a90:	880b883a 	mov	r5,r17
     a94:	a009883a 	mov	r4,r20
     a98:	103ee83a 	callr	r2
     a9c:	10004a1e 	bne	r2,zero,bc8 <___vfprintf_internal_r+0x430>
     aa0:	84000044 	addi	r16,r16,1
     aa4:	0580070e 	bge	zero,r22,ac4 <___vfprintf_internal_r+0x32c>
     aa8:	b00f883a 	mov	r7,r22
     aac:	01800c04 	movi	r6,48
     ab0:	880b883a 	mov	r5,r17
     ab4:	a009883a 	mov	r4,r20
     ab8:	000072c0 	call	72c <print_repeat>
     abc:	1000421e 	bne	r2,zero,bc8 <___vfprintf_internal_r+0x430>
     ac0:	85a1883a 	add	r16,r16,r22
     ac4:	e02d883a 	mov	r22,fp
     ac8:	bf2fc83a 	sub	r23,r23,fp
     acc:	00002006 	br	b50 <___vfprintf_internal_r+0x3b8>
     ad0:	0580090e 	bge	zero,r22,af8 <___vfprintf_internal_r+0x360>
     ad4:	b00f883a 	mov	r7,r22
     ad8:	01800804 	movi	r6,32
     adc:	880b883a 	mov	r5,r17
     ae0:	a009883a 	mov	r4,r20
     ae4:	da401015 	stw	r9,64(sp)
     ae8:	000072c0 	call	72c <print_repeat>
     aec:	da401017 	ldw	r9,64(sp)
     af0:	1000351e 	bne	r2,zero,bc8 <___vfprintf_internal_r+0x430>
     af4:	85a1883a 	add	r16,r16,r22
     af8:	483ff226 	beq	r9,zero,ac4 <_gp+0xffff6bfc>
     afc:	00800b44 	movi	r2,45
     b00:	d8800805 	stb	r2,32(sp)
     b04:	88800117 	ldw	r2,4(r17)
     b08:	01c00044 	movi	r7,1
     b0c:	d9800804 	addi	r6,sp,32
     b10:	880b883a 	mov	r5,r17
     b14:	a009883a 	mov	r4,r20
     b18:	103ee83a 	callr	r2
     b1c:	10002a1e 	bne	r2,zero,bc8 <___vfprintf_internal_r+0x430>
     b20:	84000044 	addi	r16,r16,1
     b24:	003fe706 	br	ac4 <_gp+0xffff6bfc>
     b28:	b5bfffc4 	addi	r22,r22,-1
     b2c:	b0800003 	ldbu	r2,0(r22)
     b30:	01c00044 	movi	r7,1
     b34:	d9800804 	addi	r6,sp,32
     b38:	d8800805 	stb	r2,32(sp)
     b3c:	88800117 	ldw	r2,4(r17)
     b40:	880b883a 	mov	r5,r17
     b44:	a009883a 	mov	r4,r20
     b48:	103ee83a 	callr	r2
     b4c:	10001e1e 	bne	r2,zero,bc8 <___vfprintf_internal_r+0x430>
     b50:	8585c83a 	sub	r2,r16,r22
     b54:	b5c9883a 	add	r4,r22,r23
     b58:	e085883a 	add	r2,fp,r2
     b5c:	013ff216 	blt	zero,r4,b28 <_gp+0xffff6c60>
     b60:	1021883a 	mov	r16,r2
     b64:	dd800d17 	ldw	r22,52(sp)
     b68:	00004406 	br	c7c <___vfprintf_internal_r+0x4e4>
     b6c:	00800044 	movi	r2,1
     b70:	1480080e 	bge	r2,r18,b94 <___vfprintf_internal_r+0x3fc>
     b74:	95ffffc4 	addi	r23,r18,-1
     b78:	b80f883a 	mov	r7,r23
     b7c:	01800804 	movi	r6,32
     b80:	880b883a 	mov	r5,r17
     b84:	a009883a 	mov	r4,r20
     b88:	000072c0 	call	72c <print_repeat>
     b8c:	10000e1e 	bne	r2,zero,bc8 <___vfprintf_internal_r+0x430>
     b90:	85e1883a 	add	r16,r16,r23
     b94:	b0800017 	ldw	r2,0(r22)
     b98:	01c00044 	movi	r7,1
     b9c:	d80d883a 	mov	r6,sp
     ba0:	d8800005 	stb	r2,0(sp)
     ba4:	88800117 	ldw	r2,4(r17)
     ba8:	880b883a 	mov	r5,r17
     bac:	a009883a 	mov	r4,r20
     bb0:	b5c00104 	addi	r23,r22,4
     bb4:	103ee83a 	callr	r2
     bb8:	1000031e 	bne	r2,zero,bc8 <___vfprintf_internal_r+0x430>
     bbc:	84000044 	addi	r16,r16,1
     bc0:	b82d883a 	mov	r22,r23
     bc4:	00002d06 	br	c7c <___vfprintf_internal_r+0x4e4>
     bc8:	00bfffc4 	movi	r2,-1
     bcc:	00003106 	br	c94 <___vfprintf_internal_r+0x4fc>
     bd0:	b5c00017 	ldw	r23,0(r22)
     bd4:	b7000104 	addi	fp,r22,4
     bd8:	b809883a 	mov	r4,r23
     bdc:	00007100 	call	710 <strlen>
     be0:	9091c83a 	sub	r8,r18,r2
     be4:	102d883a 	mov	r22,r2
     be8:	0200090e 	bge	zero,r8,c10 <___vfprintf_internal_r+0x478>
     bec:	400f883a 	mov	r7,r8
     bf0:	01800804 	movi	r6,32
     bf4:	880b883a 	mov	r5,r17
     bf8:	a009883a 	mov	r4,r20
     bfc:	da001015 	stw	r8,64(sp)
     c00:	000072c0 	call	72c <print_repeat>
     c04:	da001017 	ldw	r8,64(sp)
     c08:	103fef1e 	bne	r2,zero,bc8 <_gp+0xffff6d00>
     c0c:	8221883a 	add	r16,r16,r8
     c10:	88800117 	ldw	r2,4(r17)
     c14:	b00f883a 	mov	r7,r22
     c18:	b80d883a 	mov	r6,r23
     c1c:	880b883a 	mov	r5,r17
     c20:	a009883a 	mov	r4,r20
     c24:	103ee83a 	callr	r2
     c28:	103fe71e 	bne	r2,zero,bc8 <_gp+0xffff6d00>
     c2c:	85a1883a 	add	r16,r16,r22
     c30:	e02d883a 	mov	r22,fp
     c34:	00001106 	br	c7c <___vfprintf_internal_r+0x4e4>
     c38:	00c00044 	movi	r3,1
     c3c:	04ffffc4 	movi	r19,-1
     c40:	d8000e15 	stw	zero,56(sp)
     c44:	d8c00a15 	stw	r3,40(sp)
     c48:	05400284 	movi	r21,10
     c4c:	9825883a 	mov	r18,r19
     c50:	d8000c15 	stw	zero,48(sp)
     c54:	d8000b15 	stw	zero,44(sp)
     c58:	182f883a 	mov	r23,r3
     c5c:	00000806 	br	c80 <___vfprintf_internal_r+0x4e8>
     c60:	ddc00b15 	stw	r23,44(sp)
     c64:	05c00084 	movi	r23,2
     c68:	00000506 	br	c80 <___vfprintf_internal_r+0x4e8>
     c6c:	00c00044 	movi	r3,1
     c70:	d8c00c15 	stw	r3,48(sp)
     c74:	05c000c4 	movi	r23,3
     c78:	00000106 	br	c80 <___vfprintf_internal_r+0x4e8>
     c7c:	002f883a 	mov	r23,zero
     c80:	d8c00f17 	ldw	r3,60(sp)
     c84:	18c00044 	addi	r3,r3,1
     c88:	d8c00f15 	stw	r3,60(sp)
     c8c:	003edc06 	br	800 <_gp+0xffff6938>
     c90:	8005883a 	mov	r2,r16
     c94:	dfc01a17 	ldw	ra,104(sp)
     c98:	df001917 	ldw	fp,100(sp)
     c9c:	ddc01817 	ldw	r23,96(sp)
     ca0:	dd801717 	ldw	r22,92(sp)
     ca4:	dd401617 	ldw	r21,88(sp)
     ca8:	dd001517 	ldw	r20,84(sp)
     cac:	dcc01417 	ldw	r19,80(sp)
     cb0:	dc801317 	ldw	r18,76(sp)
     cb4:	dc401217 	ldw	r17,72(sp)
     cb8:	dc001117 	ldw	r16,68(sp)
     cbc:	dec01b04 	addi	sp,sp,108
     cc0:	f800283a 	ret

00000cc4 <__vfprintf_internal>:
     cc4:	00800034 	movhi	r2,0
     cc8:	1087b304 	addi	r2,r2,7884
     ccc:	300f883a 	mov	r7,r6
     cd0:	280d883a 	mov	r6,r5
     cd4:	200b883a 	mov	r5,r4
     cd8:	11000017 	ldw	r4,0(r2)
     cdc:	00007981 	jmpi	798 <___vfprintf_internal_r>

00000ce0 <__sfvwrite_small_dev>:
     ce0:	2880000b 	ldhu	r2,0(r5)
     ce4:	1080020c 	andi	r2,r2,8
     ce8:	10002126 	beq	r2,zero,d70 <__sfvwrite_small_dev+0x90>
     cec:	2880008f 	ldh	r2,2(r5)
     cf0:	defffa04 	addi	sp,sp,-24
     cf4:	dc000015 	stw	r16,0(sp)
     cf8:	dfc00515 	stw	ra,20(sp)
     cfc:	dd000415 	stw	r20,16(sp)
     d00:	dcc00315 	stw	r19,12(sp)
     d04:	dc800215 	stw	r18,8(sp)
     d08:	dc400115 	stw	r17,4(sp)
     d0c:	2821883a 	mov	r16,r5
     d10:	10001216 	blt	r2,zero,d5c <__sfvwrite_small_dev+0x7c>
     d14:	2027883a 	mov	r19,r4
     d18:	3025883a 	mov	r18,r6
     d1c:	3823883a 	mov	r17,r7
     d20:	05010004 	movi	r20,1024
     d24:	04400b0e 	bge	zero,r17,d54 <__sfvwrite_small_dev+0x74>
     d28:	880f883a 	mov	r7,r17
     d2c:	a440010e 	bge	r20,r17,d34 <__sfvwrite_small_dev+0x54>
     d30:	01c10004 	movi	r7,1024
     d34:	8140008f 	ldh	r5,2(r16)
     d38:	900d883a 	mov	r6,r18
     d3c:	9809883a 	mov	r4,r19
     d40:	0000e440 	call	e44 <_write_r>
     d44:	0080050e 	bge	zero,r2,d5c <__sfvwrite_small_dev+0x7c>
     d48:	88a3c83a 	sub	r17,r17,r2
     d4c:	90a5883a 	add	r18,r18,r2
     d50:	003ff406 	br	d24 <_gp+0xffff6e5c>
     d54:	0005883a 	mov	r2,zero
     d58:	00000706 	br	d78 <__sfvwrite_small_dev+0x98>
     d5c:	8080000b 	ldhu	r2,0(r16)
     d60:	10801014 	ori	r2,r2,64
     d64:	8080000d 	sth	r2,0(r16)
     d68:	00bfffc4 	movi	r2,-1
     d6c:	00000206 	br	d78 <__sfvwrite_small_dev+0x98>
     d70:	00bfffc4 	movi	r2,-1
     d74:	f800283a 	ret
     d78:	dfc00517 	ldw	ra,20(sp)
     d7c:	dd000417 	ldw	r20,16(sp)
     d80:	dcc00317 	ldw	r19,12(sp)
     d84:	dc800217 	ldw	r18,8(sp)
     d88:	dc400117 	ldw	r17,4(sp)
     d8c:	dc000017 	ldw	r16,0(sp)
     d90:	dec00604 	addi	sp,sp,24
     d94:	f800283a 	ret

00000d98 <putc>:
     d98:	defffd04 	addi	sp,sp,-12
     d9c:	00800034 	movhi	r2,0
     da0:	dc000115 	stw	r16,4(sp)
     da4:	dfc00215 	stw	ra,8(sp)
     da8:	10833804 	addi	r2,r2,3296
     dac:	28800115 	stw	r2,4(r5)
     db0:	00800034 	movhi	r2,0
     db4:	1087b304 	addi	r2,r2,7884
     db8:	d9000005 	stb	r4,0(sp)
     dbc:	2021883a 	mov	r16,r4
     dc0:	11000017 	ldw	r4,0(r2)
     dc4:	01c00044 	movi	r7,1
     dc8:	d80d883a 	mov	r6,sp
     dcc:	0000ce00 	call	ce0 <__sfvwrite_small_dev>
     dd0:	00ffffc4 	movi	r3,-1
     dd4:	10c00126 	beq	r2,r3,ddc <putc+0x44>
     dd8:	8005883a 	mov	r2,r16
     ddc:	dfc00217 	ldw	ra,8(sp)
     de0:	dc000117 	ldw	r16,4(sp)
     de4:	dec00304 	addi	sp,sp,12
     de8:	f800283a 	ret

00000dec <_putc_r>:
     dec:	defffd04 	addi	sp,sp,-12
     df0:	00800034 	movhi	r2,0
     df4:	dc000115 	stw	r16,4(sp)
     df8:	dfc00215 	stw	ra,8(sp)
     dfc:	10833804 	addi	r2,r2,3296
     e00:	30800115 	stw	r2,4(r6)
     e04:	00800034 	movhi	r2,0
     e08:	1087b304 	addi	r2,r2,7884
     e0c:	11000017 	ldw	r4,0(r2)
     e10:	2821883a 	mov	r16,r5
     e14:	01c00044 	movi	r7,1
     e18:	300b883a 	mov	r5,r6
     e1c:	d80d883a 	mov	r6,sp
     e20:	dc000005 	stb	r16,0(sp)
     e24:	0000ce00 	call	ce0 <__sfvwrite_small_dev>
     e28:	00ffffc4 	movi	r3,-1
     e2c:	10c00126 	beq	r2,r3,e34 <_putc_r+0x48>
     e30:	8005883a 	mov	r2,r16
     e34:	dfc00217 	ldw	ra,8(sp)
     e38:	dc000117 	ldw	r16,4(sp)
     e3c:	dec00304 	addi	sp,sp,12
     e40:	f800283a 	ret

00000e44 <_write_r>:
     e44:	defffd04 	addi	sp,sp,-12
     e48:	dc000015 	stw	r16,0(sp)
     e4c:	04000034 	movhi	r16,0
     e50:	dc400115 	stw	r17,4(sp)
     e54:	84087104 	addi	r16,r16,8644
     e58:	2023883a 	mov	r17,r4
     e5c:	2809883a 	mov	r4,r5
     e60:	300b883a 	mov	r5,r6
     e64:	380d883a 	mov	r6,r7
     e68:	dfc00215 	stw	ra,8(sp)
     e6c:	80000015 	stw	zero,0(r16)
     e70:	00010500 	call	1050 <write>
     e74:	00ffffc4 	movi	r3,-1
     e78:	10c0031e 	bne	r2,r3,e88 <_write_r+0x44>
     e7c:	80c00017 	ldw	r3,0(r16)
     e80:	18000126 	beq	r3,zero,e88 <_write_r+0x44>
     e84:	88c00015 	stw	r3,0(r17)
     e88:	dfc00217 	ldw	ra,8(sp)
     e8c:	dc400117 	ldw	r17,4(sp)
     e90:	dc000017 	ldw	r16,0(sp)
     e94:	dec00304 	addi	sp,sp,12
     e98:	f800283a 	ret

00000e9c <__mulsi3>:
     e9c:	0005883a 	mov	r2,zero
     ea0:	20000726 	beq	r4,zero,ec0 <__mulsi3+0x24>
     ea4:	20c0004c 	andi	r3,r4,1
     ea8:	2008d07a 	srli	r4,r4,1
     eac:	18000126 	beq	r3,zero,eb4 <__mulsi3+0x18>
     eb0:	1145883a 	add	r2,r2,r5
     eb4:	294b883a 	add	r5,r5,r5
     eb8:	203ffa1e 	bne	r4,zero,ea4 <_gp+0xffff6fdc>
     ebc:	f800283a 	ret
     ec0:	f800283a 	ret

00000ec4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
     ec4:	defffc04 	addi	sp,sp,-16
     ec8:	df000315 	stw	fp,12(sp)
     ecc:	df000304 	addi	fp,sp,12
     ed0:	e13ffd15 	stw	r4,-12(fp)
     ed4:	e17ffe15 	stw	r5,-8(fp)
     ed8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
     edc:	e0fffe17 	ldw	r3,-8(fp)
     ee0:	e0bffd17 	ldw	r2,-12(fp)
     ee4:	18800c26 	beq	r3,r2,f18 <alt_load_section+0x54>
  {
    while( to != end )
     ee8:	00000806 	br	f0c <alt_load_section+0x48>
    {
      *to++ = *from++;
     eec:	e0bffe17 	ldw	r2,-8(fp)
     ef0:	10c00104 	addi	r3,r2,4
     ef4:	e0fffe15 	stw	r3,-8(fp)
     ef8:	e0fffd17 	ldw	r3,-12(fp)
     efc:	19000104 	addi	r4,r3,4
     f00:	e13ffd15 	stw	r4,-12(fp)
     f04:	18c00017 	ldw	r3,0(r3)
     f08:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     f0c:	e0fffe17 	ldw	r3,-8(fp)
     f10:	e0bfff17 	ldw	r2,-4(fp)
     f14:	18bff51e 	bne	r3,r2,eec <_gp+0xffff7024>
    {
      *to++ = *from++;
    }
  }
}
     f18:	0001883a 	nop
     f1c:	e037883a 	mov	sp,fp
     f20:	df000017 	ldw	fp,0(sp)
     f24:	dec00104 	addi	sp,sp,4
     f28:	f800283a 	ret

00000f2c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
     f2c:	defffe04 	addi	sp,sp,-8
     f30:	dfc00115 	stw	ra,4(sp)
     f34:	df000015 	stw	fp,0(sp)
     f38:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
     f3c:	01800034 	movhi	r6,0
     f40:	3187ba04 	addi	r6,r6,7912
     f44:	01400034 	movhi	r5,0
     f48:	29470504 	addi	r5,r5,7188
     f4c:	01000034 	movhi	r4,0
     f50:	2107ba04 	addi	r4,r4,7912
     f54:	0000ec40 	call	ec4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
     f58:	01800034 	movhi	r6,0
     f5c:	31800804 	addi	r6,r6,32
     f60:	01400034 	movhi	r5,0
     f64:	29400804 	addi	r5,r5,32
     f68:	01000034 	movhi	r4,0
     f6c:	21000804 	addi	r4,r4,32
     f70:	0000ec40 	call	ec4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
     f74:	01800034 	movhi	r6,0
     f78:	31870504 	addi	r6,r6,7188
     f7c:	01400034 	movhi	r5,0
     f80:	2946c504 	addi	r5,r5,6932
     f84:	01000034 	movhi	r4,0
     f88:	2106c504 	addi	r4,r4,6932
     f8c:	0000ec40 	call	ec4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
     f90:	00013580 	call	1358 <alt_dcache_flush_all>
  alt_icache_flush_all();
     f94:	00014580 	call	1458 <alt_icache_flush_all>
}
     f98:	0001883a 	nop
     f9c:	e037883a 	mov	sp,fp
     fa0:	dfc00117 	ldw	ra,4(sp)
     fa4:	df000017 	ldw	fp,0(sp)
     fa8:	dec00204 	addi	sp,sp,8
     fac:	f800283a 	ret

00000fb0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     fb0:	defffe04 	addi	sp,sp,-8
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     fb4:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     fb8:	dfc00115 	stw	ra,4(sp)
     fbc:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     fc0:	00011240 	call	1124 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
     fc4:	00011440 	call	1144 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
     fc8:	01800034 	movhi	r6,0
     fcc:	3186fe04 	addi	r6,r6,7160
     fd0:	300b883a 	mov	r5,r6
     fd4:	3009883a 	mov	r4,r6
     fd8:	00014e40 	call	14e4 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
     fdc:	d1a0c017 	ldw	r6,-32000(gp)
     fe0:	d160c117 	ldw	r5,-31996(gp)
     fe4:	d120c217 	ldw	r4,-31992(gp)
     fe8:	00003040 	call	304 <main>
  close(STDOUT_FILENO);
     fec:	01000044 	movi	r4,1
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
     ff0:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
     ff4:	00012900 	call	1290 <close>
  exit (result);
     ff8:	8009883a 	mov	r4,r16
     ffc:	00019200 	call	1920 <exit>

00001000 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    1000:	defffd04 	addi	sp,sp,-12
    1004:	dfc00215 	stw	ra,8(sp)
    1008:	df000115 	stw	fp,4(sp)
    100c:	df000104 	addi	fp,sp,4
    1010:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    1014:	e13fff17 	ldw	r4,-4(fp)
    1018:	00012080 	call	1208 <alt_busy_sleep>
}
    101c:	e037883a 	mov	sp,fp
    1020:	dfc00117 	ldw	ra,4(sp)
    1024:	df000017 	ldw	fp,0(sp)
    1028:	dec00204 	addi	sp,sp,8
    102c:	f800283a 	ret

00001030 <alt_get_errno>:

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    1030:	00800034 	movhi	r2,0
    1034:	1087b904 	addi	r2,r2,7908
    1038:	10800017 	ldw	r2,0(r2)
    103c:	10000126 	beq	r2,zero,1044 <alt_get_errno+0x14>
    1040:	1000683a 	jmp	r2
}
    1044:	00800034 	movhi	r2,0
    1048:	10887104 	addi	r2,r2,8644
    104c:	f800283a 	ret

00001050 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    1050:	defffa04 	addi	sp,sp,-24
    1054:	dfc00515 	stw	ra,20(sp)
    1058:	dd000415 	stw	r20,16(sp)
    105c:	dcc00315 	stw	r19,12(sp)
    1060:	dc800215 	stw	r18,8(sp)
    1064:	dc400115 	stw	r17,4(sp)
    1068:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    106c:	20002016 	blt	r4,zero,10f0 <write+0xa0>
    1070:	2827883a 	mov	r19,r5
    1074:	04000034 	movhi	r16,0
    1078:	01400304 	movi	r5,12
    107c:	2025883a 	mov	r18,r4
    1080:	3029883a 	mov	r20,r6
    1084:	84074804 	addi	r16,r16,7456
    1088:	0000e9c0 	call	e9c <__mulsi3>
    108c:	80a3883a 	add	r17,r16,r2
  
  if (fd)
    1090:	88001726 	beq	r17,zero,10f0 <write+0xa0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    1094:	88800217 	ldw	r2,8(r17)
    1098:	108000cc 	andi	r2,r2,3
    109c:	10001126 	beq	r2,zero,10e4 <write+0x94>
    10a0:	01400304 	movi	r5,12
    10a4:	9009883a 	mov	r4,r18
    10a8:	0000e9c0 	call	e9c <__mulsi3>
    10ac:	8085883a 	add	r2,r16,r2
    10b0:	10800017 	ldw	r2,0(r2)
    10b4:	10800617 	ldw	r2,24(r2)
    10b8:	10000a26 	beq	r2,zero,10e4 <write+0x94>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    10bc:	a00d883a 	mov	r6,r20
    10c0:	980b883a 	mov	r5,r19
    10c4:	8809883a 	mov	r4,r17
    10c8:	103ee83a 	callr	r2
    10cc:	1021883a 	mov	r16,r2
    10d0:	10000b0e 	bge	r2,zero,1100 <write+0xb0>
      {
        ALT_ERRNO = -rval;
    10d4:	00010300 	call	1030 <alt_get_errno>
    10d8:	0421c83a 	sub	r16,zero,r16
    10dc:	14000015 	stw	r16,0(r2)
    10e0:	00000606 	br	10fc <write+0xac>
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
    10e4:	00010300 	call	1030 <alt_get_errno>
    10e8:	00c00344 	movi	r3,13
    10ec:	00000206 	br	10f8 <write+0xa8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    10f0:	00010300 	call	1030 <alt_get_errno>
    10f4:	00c01444 	movi	r3,81
    10f8:	10c00015 	stw	r3,0(r2)
  }
  return -1;
    10fc:	043fffc4 	movi	r16,-1
}
    1100:	8005883a 	mov	r2,r16
    1104:	dfc00517 	ldw	ra,20(sp)
    1108:	dd000417 	ldw	r20,16(sp)
    110c:	dcc00317 	ldw	r19,12(sp)
    1110:	dc800217 	ldw	r18,8(sp)
    1114:	dc400117 	ldw	r17,4(sp)
    1118:	dc000017 	ldw	r16,0(sp)
    111c:	dec00604 	addi	sp,sp,24
    1120:	f800283a 	ret

00001124 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    1124:	deffff04 	addi	sp,sp,-4
    1128:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_PROCESSOR, nios2_processor);
    112c:	000176c0 	call	176c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    1130:	00800044 	movi	r2,1
    1134:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    1138:	dfc00017 	ldw	ra,0(sp)
    113c:	dec00104 	addi	sp,sp,4
    1140:	f800283a 	ret

00001144 <alt_sys_init>:

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    1144:	01400034 	movhi	r5,0
    1148:	01000034 	movhi	r4,0
    114c:	2947b504 	addi	r5,r5,7892
    1150:	21073d04 	addi	r4,r4,7412
    1154:	00013b41 	jmpi	13b4 <alt_dev_llist_insert>

00001158 <altera_avalon_jtag_uart_read_fd>:
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    1158:	20800017 	ldw	r2,0(r4)
    115c:	21c00217 	ldw	r7,8(r4)
    1160:	11000a04 	addi	r4,r2,40
    1164:	00011781 	jmpi	1178 <altera_avalon_jtag_uart_read>

00001168 <altera_avalon_jtag_uart_write_fd>:
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    1168:	20800017 	ldw	r2,0(r4)
    116c:	21c00217 	ldw	r7,8(r4)
    1170:	11000a04 	addi	r4,r2,40
    1174:	00011d41 	jmpi	11d4 <altera_avalon_jtag_uart_write>

00001178 <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
    1178:	21000017 	ldw	r4,0(r4)

  char * ptr = buffer;
  char * end = buffer + space;
    117c:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    1180:	2805883a 	mov	r2,r5

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
    1184:	3a10000c 	andi	r8,r7,16384
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    1188:	11800b2e 	bgeu	r2,r6,11b8 <altera_avalon_jtag_uart_read+0x40>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    118c:	20c00037 	ldwio	r3,0(r4)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    1190:	1a60000c 	andi	r9,r3,32768
    1194:	48000326 	beq	r9,zero,11a4 <altera_avalon_jtag_uart_read+0x2c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    1198:	10c00005 	stb	r3,0(r2)
    119c:	10800044 	addi	r2,r2,1
    11a0:	003ff906 	br	1188 <_gp+0xffff72c0>
    else if (ptr != buffer)
    11a4:	11400226 	beq	r2,r5,11b0 <altera_avalon_jtag_uart_read+0x38>
      break;   
    
  }

  if (ptr != buffer)
    return ptr - buffer;
    11a8:	1145c83a 	sub	r2,r2,r5
    11ac:	f800283a 	ret

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
    11b0:	403ff526 	beq	r8,zero,1188 <_gp+0xffff72c0>
    11b4:	00000106 	br	11bc <altera_avalon_jtag_uart_read+0x44>
      break;   
    
  }

  if (ptr != buffer)
    11b8:	117ffb1e 	bne	r2,r5,11a8 <_gp+0xffff72e0>
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    11bc:	39d0000c 	andi	r7,r7,16384
    11c0:	3800021e 	bne	r7,zero,11cc <altera_avalon_jtag_uart_read+0x54>
    return -EWOULDBLOCK;
  else
    return -EIO;
    11c4:	00bffec4 	movi	r2,-5
    11c8:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
    11cc:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
    11d0:	f800283a 	ret

000011d4 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    11d4:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    11d8:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    11dc:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    11e0:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    11e4:	2980072e 	bgeu	r5,r6,1204 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    11e8:	38c00037 	ldwio	r3,0(r7)
    11ec:	18ffffec 	andhi	r3,r3,65535
    11f0:	183ffc26 	beq	r3,zero,11e4 <_gp+0xffff731c>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    11f4:	28c00007 	ldb	r3,0(r5)
    11f8:	20c00035 	stwio	r3,0(r4)
    11fc:	29400044 	addi	r5,r5,1
    1200:	003ff806 	br	11e4 <_gp+0xffff731c>

  return count;
}
    1204:	f800283a 	ret

00001208 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    1208:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    120c:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    1210:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    1214:	dc000015 	stw	r16,0(sp)
    1218:	dfc00115 	stw	ra,4(sp)
    121c:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    1220:	00005140 	call	514 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    1224:	10001026 	beq	r2,zero,1268 <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    1228:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    122c:	013999b4 	movhi	r4,58982
    1230:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    1234:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    1238:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    123c:	297fffc4 	addi	r5,r5,-1
    1240:	283ffe1e 	bne	r5,zero,123c <_gp+0xffff7374>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    1244:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    1248:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    124c:	18bffb16 	blt	r3,r2,123c <_gp+0xffff7374>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    1250:	01400144 	movi	r5,5
    1254:	8009883a 	mov	r4,r16
    1258:	0000e9c0 	call	e9c <__mulsi3>
    125c:	10bfffc4 	addi	r2,r2,-1
    1260:	103ffe1e 	bne	r2,zero,125c <_gp+0xffff7394>
    1264:	00000506 	br	127c <alt_busy_sleep+0x74>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    1268:	01400144 	movi	r5,5
    126c:	8009883a 	mov	r4,r16
    1270:	0000e9c0 	call	e9c <__mulsi3>
    1274:	10bfffc4 	addi	r2,r2,-1
    1278:	00bffe16 	blt	zero,r2,1274 <_gp+0xffff73ac>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    127c:	0005883a 	mov	r2,zero
    1280:	dfc00117 	ldw	ra,4(sp)
    1284:	dc000017 	ldw	r16,0(sp)
    1288:	dec00204 	addi	sp,sp,8
    128c:	f800283a 	ret

00001290 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    1290:	defffd04 	addi	sp,sp,-12
    1294:	dfc00215 	stw	ra,8(sp)
    1298:	dc400115 	stw	r17,4(sp)
    129c:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    12a0:	20001d16 	blt	r4,zero,1318 <close+0x88>
    12a4:	01400304 	movi	r5,12
    12a8:	2023883a 	mov	r17,r4
    12ac:	0000e9c0 	call	e9c <__mulsi3>
    12b0:	01000034 	movhi	r4,0
    12b4:	21074804 	addi	r4,r4,7456
    12b8:	2089883a 	add	r4,r4,r2

  if (fd)
    12bc:	20001626 	beq	r4,zero,1318 <close+0x88>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    12c0:	20800017 	ldw	r2,0(r4)
    12c4:	10800417 	ldw	r2,16(r2)
    12c8:	10000326 	beq	r2,zero,12d8 <close+0x48>
    12cc:	103ee83a 	callr	r2
    12d0:	1021883a 	mov	r16,r2
    12d4:	00000106 	br	12dc <close+0x4c>
    12d8:	0021883a 	mov	r16,zero

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    12dc:	8809883a 	mov	r4,r17
    12e0:	00017100 	call	1710 <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
    12e4:	0005883a 	mov	r2,zero
    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
    12e8:	8000160e 	bge	r16,zero,1344 <close+0xb4>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    12ec:	00800034 	movhi	r2,0
    12f0:	1087b904 	addi	r2,r2,7908
    12f4:	10800017 	ldw	r2,0(r2)
    12f8:	10000226 	beq	r2,zero,1304 <close+0x74>
    12fc:	103ee83a 	callr	r2
    1300:	00000206 	br	130c <close+0x7c>
    1304:	00800034 	movhi	r2,0
    1308:	10887104 	addi	r2,r2,8644
    {
      ALT_ERRNO = -rval;
    130c:	0421c83a 	sub	r16,zero,r16
    1310:	14000015 	stw	r16,0(r2)
    1314:	00000a06 	br	1340 <close+0xb0>
    1318:	00800034 	movhi	r2,0
    131c:	1087b904 	addi	r2,r2,7908
    1320:	10800017 	ldw	r2,0(r2)
    1324:	10000226 	beq	r2,zero,1330 <close+0xa0>
    1328:	103ee83a 	callr	r2
    132c:	00000206 	br	1338 <close+0xa8>
    1330:	00800034 	movhi	r2,0
    1334:	10887104 	addi	r2,r2,8644
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
    1338:	00c01444 	movi	r3,81
    133c:	10c00015 	stw	r3,0(r2)
    return -1;
    1340:	00bfffc4 	movi	r2,-1
  }
}
    1344:	dfc00217 	ldw	ra,8(sp)
    1348:	dc400117 	ldw	r17,4(sp)
    134c:	dc000017 	ldw	r16,0(sp)
    1350:	dec00304 	addi	sp,sp,12
    1354:	f800283a 	ret

00001358 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    1358:	f800283a 	ret

0000135c <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    135c:	3005883a 	mov	r2,r6
    1360:	f800283a 	ret

00001364 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    1364:	defffe04 	addi	sp,sp,-8
    1368:	dfc00115 	stw	ra,4(sp)
    136c:	df000015 	stw	fp,0(sp)
    1370:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    1374:	00800034 	movhi	r2,0
    1378:	1087b904 	addi	r2,r2,7908
    137c:	10800017 	ldw	r2,0(r2)
    1380:	10000526 	beq	r2,zero,1398 <alt_get_errno+0x34>
    1384:	00800034 	movhi	r2,0
    1388:	1087b904 	addi	r2,r2,7908
    138c:	10800017 	ldw	r2,0(r2)
    1390:	103ee83a 	callr	r2
    1394:	00000206 	br	13a0 <alt_get_errno+0x3c>
    1398:	00800034 	movhi	r2,0
    139c:	10887104 	addi	r2,r2,8644
}
    13a0:	e037883a 	mov	sp,fp
    13a4:	dfc00117 	ldw	ra,4(sp)
    13a8:	df000017 	ldw	fp,0(sp)
    13ac:	dec00204 	addi	sp,sp,8
    13b0:	f800283a 	ret

000013b4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    13b4:	defffa04 	addi	sp,sp,-24
    13b8:	dfc00515 	stw	ra,20(sp)
    13bc:	df000415 	stw	fp,16(sp)
    13c0:	df000404 	addi	fp,sp,16
    13c4:	e13ffe15 	stw	r4,-8(fp)
    13c8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    13cc:	e0bffe17 	ldw	r2,-8(fp)
    13d0:	10000326 	beq	r2,zero,13e0 <alt_dev_llist_insert+0x2c>
    13d4:	e0bffe17 	ldw	r2,-8(fp)
    13d8:	10800217 	ldw	r2,8(r2)
    13dc:	1000061e 	bne	r2,zero,13f8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    13e0:	00013640 	call	1364 <alt_get_errno>
    13e4:	1007883a 	mov	r3,r2
    13e8:	00800584 	movi	r2,22
    13ec:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    13f0:	00bffa84 	movi	r2,-22
    13f4:	00001306 	br	1444 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    13f8:	e0bffe17 	ldw	r2,-8(fp)
    13fc:	e0ffff17 	ldw	r3,-4(fp)
    1400:	e0fffc15 	stw	r3,-16(fp)
    1404:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    1408:	e0bffd17 	ldw	r2,-12(fp)
    140c:	e0fffc17 	ldw	r3,-16(fp)
    1410:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    1414:	e0bffc17 	ldw	r2,-16(fp)
    1418:	10c00017 	ldw	r3,0(r2)
    141c:	e0bffd17 	ldw	r2,-12(fp)
    1420:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    1424:	e0bffc17 	ldw	r2,-16(fp)
    1428:	10800017 	ldw	r2,0(r2)
    142c:	e0fffd17 	ldw	r3,-12(fp)
    1430:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    1434:	e0bffc17 	ldw	r2,-16(fp)
    1438:	e0fffd17 	ldw	r3,-12(fp)
    143c:	10c00015 	stw	r3,0(r2)

  return 0;  
    1440:	0005883a 	mov	r2,zero
}
    1444:	e037883a 	mov	sp,fp
    1448:	dfc00117 	ldw	ra,4(sp)
    144c:	df000017 	ldw	fp,0(sp)
    1450:	dec00204 	addi	sp,sp,8
    1454:	f800283a 	ret

00001458 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    1458:	f800283a 	ret

0000145c <alt_open_fd.constprop.0>:
 *
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
    145c:	defffd04 	addi	sp,sp,-12
    1460:	dc400115 	stw	r17,4(sp)
    1464:	2023883a 	mov	r17,r4
    1468:	2809883a 	mov	r4,r5
    146c:	300b883a 	mov	r5,r6
{
  int old;

  old = open (name, flags, mode);
    1470:	01807fc4 	movi	r6,511
 *
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
    1474:	dfc00215 	stw	ra,8(sp)
    1478:	dc000015 	stw	r16,0(sp)
{
  int old;

  old = open (name, flags, mode);
    147c:	00015580 	call	1558 <open>

  if (old >= 0)
    1480:	10001316 	blt	r2,zero,14d0 <alt_open_fd.constprop.0+0x74>
  {
    fd->dev      = alt_fd_list[old].dev;
    1484:	01400304 	movi	r5,12
    1488:	1009883a 	mov	r4,r2
    148c:	1021883a 	mov	r16,r2
    1490:	0000e9c0 	call	e9c <__mulsi3>
    1494:	00c00034 	movhi	r3,0
    1498:	18c74804 	addi	r3,r3,7456
    149c:	1885883a 	add	r2,r3,r2
    14a0:	10c00017 	ldw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
    14a4:	8009883a 	mov	r4,r16

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    14a8:	88c00015 	stw	r3,0(r17)
    fd->priv     = alt_fd_list[old].priv;
    14ac:	10c00117 	ldw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    14b0:	10800217 	ldw	r2,8(r2)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    14b4:	88c00115 	stw	r3,4(r17)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    14b8:	88800215 	stw	r2,8(r17)

    alt_release_fd (old);
  }
} 
    14bc:	dfc00217 	ldw	ra,8(sp)
    14c0:	dc400117 	ldw	r17,4(sp)
    14c4:	dc000017 	ldw	r16,0(sp)
    14c8:	dec00304 	addi	sp,sp,12
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
    14cc:	00017101 	jmpi	1710 <alt_release_fd>
  }
} 
    14d0:	dfc00217 	ldw	ra,8(sp)
    14d4:	dc400117 	ldw	r17,4(sp)
    14d8:	dc000017 	ldw	r16,0(sp)
    14dc:	dec00304 	addi	sp,sp,12
    14e0:	f800283a 	ret

000014e4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    14e4:	defffb04 	addi	sp,sp,-20
    14e8:	dc000015 	stw	r16,0(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    14ec:	04000034 	movhi	r16,0
    14f0:	84074b04 	addi	r16,r16,7468
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    14f4:	dc400115 	stw	r17,4(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    14f8:	04400044 	movi	r17,1
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    14fc:	dcc00315 	stw	r19,12(sp)
    1500:	dc800215 	stw	r18,8(sp)
    1504:	2827883a 	mov	r19,r5
    1508:	3025883a 	mov	r18,r6
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    150c:	200b883a 	mov	r5,r4
    1510:	880d883a 	mov	r6,r17
    1514:	8009883a 	mov	r4,r16
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    1518:	dfc00415 	stw	ra,16(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    151c:	000145c0 	call	145c <alt_open_fd.constprop.0>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    1520:	980b883a 	mov	r5,r19
    1524:	813ffd04 	addi	r4,r16,-12
    1528:	000d883a 	mov	r6,zero
    152c:	000145c0 	call	145c <alt_open_fd.constprop.0>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    1530:	880d883a 	mov	r6,r17
    1534:	900b883a 	mov	r5,r18
    1538:	81000304 	addi	r4,r16,12
}  
    153c:	dfc00417 	ldw	ra,16(sp)
    1540:	dcc00317 	ldw	r19,12(sp)
    1544:	dc800217 	ldw	r18,8(sp)
    1548:	dc400117 	ldw	r17,4(sp)
    154c:	dc000017 	ldw	r16,0(sp)
    1550:	dec00504 	addi	sp,sp,20
{
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    1554:	000145c1 	jmpi	145c <alt_open_fd.constprop.0>

00001558 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    1558:	defff504 	addi	sp,sp,-44
    155c:	dd000515 	stw	r20,20(sp)
    1560:	2829883a 	mov	r20,r5
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    1564:	01400034 	movhi	r5,0
    1568:	2947b504 	addi	r5,r5,7892
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    156c:	dd400615 	stw	r21,24(sp)
    1570:	dcc00415 	stw	r19,16(sp)
    1574:	dfc00a15 	stw	ra,40(sp)
    1578:	df000915 	stw	fp,36(sp)
    157c:	ddc00815 	stw	r23,32(sp)
    1580:	dd800715 	stw	r22,28(sp)
    1584:	dc800315 	stw	r18,12(sp)
    1588:	dc400215 	stw	r17,8(sp)
    158c:	dc000115 	stw	r16,4(sp)
    1590:	2027883a 	mov	r19,r4
    1594:	302b883a 	mov	r21,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    1598:	00017740 	call	1774 <alt_find_dev>
    159c:	1000061e 	bne	r2,zero,15b8 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    15a0:	9809883a 	mov	r4,r19
    15a4:	00017e80 	call	17e8 <alt_find_file>
    15a8:	1023883a 	mov	r17,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    15ac:	10004526 	beq	r2,zero,16c4 <open+0x16c>
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    isafs = 1;
    15b0:	04800044 	movi	r18,1
    15b4:	00000206 	br	15c0 <open+0x68>
    15b8:	1023883a 	mov	r17,r2
    15bc:	0025883a 	mov	r18,zero
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
    15c0:	8809883a 	mov	r4,r17
    15c4:	00018940 	call	1894 <alt_get_fd>
    15c8:	1021883a 	mov	r16,r2
    15cc:	10004016 	blt	r2,zero,16d0 <open+0x178>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    15d0:	01400304 	movi	r5,12
    15d4:	1009883a 	mov	r4,r2
    15d8:	05800034 	movhi	r22,0
    15dc:	0000e9c0 	call	e9c <__mulsi3>
    15e0:	b5874804 	addi	r22,r22,7456
    15e4:	b0af883a 	add	r23,r22,r2
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    15e8:	00900034 	movhi	r2,16384
    15ec:	10bfffc4 	addi	r2,r2,-1
    15f0:	a084703a 	and	r2,r20,r2
    15f4:	b8c00204 	addi	r3,r23,8
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    15f8:	90000526 	beq	r18,zero,1610 <open+0xb8>
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    15fc:	18800015 	stw	r2,0(r3)
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    1600:	88800317 	ldw	r2,12(r17)
    1604:	1000191e 	bne	r2,zero,166c <open+0x114>
    1608:	8005883a 	mov	r2,r16
    160c:	00003406 	br	16e0 <open+0x188>

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    1610:	10900034 	orhi	r2,r2,16384
    1614:	18800015 	stw	r2,0(r3)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    1618:	00800034 	movhi	r2,0
    161c:	1087b404 	addi	r2,r2,7888
    1620:	10c00017 	ldw	r3,0(r2)
    1624:	b025883a 	mov	r18,r22
    1628:	0039883a 	mov	fp,zero
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    162c:	8009883a 	mov	r4,r16
    1630:	01400304 	movi	r5,12
    1634:	d8c00015 	stw	r3,0(sp)
    1638:	0000e9c0 	call	e9c <__mulsi3>
    163c:	b085883a 	add	r2,r22,r2
    1640:	91000017 	ldw	r4,0(r18)
    1644:	10800017 	ldw	r2,0(r2)
    1648:	d8c00017 	ldw	r3,0(sp)
    164c:	2080031e 	bne	r4,r2,165c <open+0x104>
    1650:	90800217 	ldw	r2,8(r18)
    1654:	1000010e 	bge	r2,zero,165c <open+0x104>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    1658:	95c01f1e 	bne	r18,r23,16d8 <open+0x180>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    165c:	e7000044 	addi	fp,fp,1
    1660:	94800304 	addi	r18,r18,12
    1664:	1f3ff12e 	bgeu	r3,fp,162c <_gp+0xffff7764>
    1668:	003fe506 	br	1600 <_gp+0xffff7738>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    166c:	a80f883a 	mov	r7,r21
    1670:	a00d883a 	mov	r6,r20
    1674:	980b883a 	mov	r5,r19
    1678:	b809883a 	mov	r4,r23
    167c:	103ee83a 	callr	r2
    1680:	1023883a 	mov	r17,r2
    1684:	8005883a 	mov	r2,r16
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    1688:	8800150e 	bge	r17,zero,16e0 <open+0x188>
  {
    alt_release_fd (index);  
    168c:	8009883a 	mov	r4,r16
    1690:	00017100 	call	1710 <alt_release_fd>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    1694:	00800034 	movhi	r2,0
    1698:	1087b904 	addi	r2,r2,7908
    169c:	10800017 	ldw	r2,0(r2)
    16a0:	10000226 	beq	r2,zero,16ac <open+0x154>
    16a4:	103ee83a 	callr	r2
    16a8:	00000206 	br	16b4 <open+0x15c>
    16ac:	00800034 	movhi	r2,0
    16b0:	10887104 	addi	r2,r2,8644
    ALT_ERRNO = -status;
    16b4:	0463c83a 	sub	r17,zero,r17
    16b8:	14400015 	stw	r17,0(r2)
    return -1;
    16bc:	00bfffc4 	movi	r2,-1
    16c0:	00000706 	br	16e0 <open+0x188>
      }
    }
  }
  else
  {
    status = -ENODEV;
    16c4:	047ffb44 	movi	r17,-19
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    16c8:	043fffc4 	movi	r16,-1
    16cc:	003fef06 	br	168c <_gp+0xffff77c4>
    16d0:	1023883a 	mov	r17,r2
    16d4:	003fed06 	br	168c <_gp+0xffff77c4>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    16d8:	047ffcc4 	movi	r17,-13
    16dc:	003feb06 	br	168c <_gp+0xffff77c4>
  }
  
  /* return the reference upon success */

  return index;
}
    16e0:	dfc00a17 	ldw	ra,40(sp)
    16e4:	df000917 	ldw	fp,36(sp)
    16e8:	ddc00817 	ldw	r23,32(sp)
    16ec:	dd800717 	ldw	r22,28(sp)
    16f0:	dd400617 	ldw	r21,24(sp)
    16f4:	dd000517 	ldw	r20,20(sp)
    16f8:	dcc00417 	ldw	r19,16(sp)
    16fc:	dc800317 	ldw	r18,12(sp)
    1700:	dc400217 	ldw	r17,8(sp)
    1704:	dc000117 	ldw	r16,4(sp)
    1708:	dec00b04 	addi	sp,sp,44
    170c:	f800283a 	ret

00001710 <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
    1710:	00c00084 	movi	r3,2
    1714:	1900140e 	bge	r3,r4,1768 <alt_release_fd+0x58>
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    1718:	defffd04 	addi	sp,sp,-12
    171c:	dc000015 	stw	r16,0(sp)
  if (fd > 2)
  {
    alt_fd_list[fd].fd_flags = 0;
    1720:	01400304 	movi	r5,12
    1724:	04000034 	movhi	r16,0
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    1728:	dfc00215 	stw	ra,8(sp)
    172c:	dc400115 	stw	r17,4(sp)
  if (fd > 2)
  {
    alt_fd_list[fd].fd_flags = 0;
    1730:	84074804 	addi	r16,r16,7456
    1734:	2023883a 	mov	r17,r4
    1738:	0000e9c0 	call	e9c <__mulsi3>
    173c:	8085883a 	add	r2,r16,r2
    alt_fd_list[fd].dev      = 0;
    1740:	01400304 	movi	r5,12
    1744:	8809883a 	mov	r4,r17

void alt_release_fd (int fd)
{
  if (fd > 2)
  {
    alt_fd_list[fd].fd_flags = 0;
    1748:	10000215 	stw	zero,8(r2)
    alt_fd_list[fd].dev      = 0;
    174c:	0000e9c0 	call	e9c <__mulsi3>
    1750:	8085883a 	add	r2,r16,r2
    1754:	10000015 	stw	zero,0(r2)
  }
}
    1758:	dfc00217 	ldw	ra,8(sp)
    175c:	dc400117 	ldw	r17,4(sp)
    1760:	dc000017 	ldw	r16,0(sp)
    1764:	dec00304 	addi	sp,sp,12
    1768:	f800283a 	ret

0000176c <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    176c:	000170fa 	wrctl	ienable,zero
    1770:	f800283a 	ret

00001774 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    1774:	defffb04 	addi	sp,sp,-20
    1778:	dcc00315 	stw	r19,12(sp)
    177c:	dc800215 	stw	r18,8(sp)
    1780:	dc400115 	stw	r17,4(sp)
    1784:	dc000015 	stw	r16,0(sp)
    1788:	dfc00415 	stw	ra,16(sp)
    178c:	2027883a 	mov	r19,r4
    1790:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
    1794:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
    1798:	00007100 	call	710 <strlen>
    179c:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    17a0:	84400726 	beq	r16,r17,17c0 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    17a4:	81000217 	ldw	r4,8(r16)
    17a8:	900d883a 	mov	r6,r18
    17ac:	980b883a 	mov	r5,r19
    17b0:	00019400 	call	1940 <memcmp>
    17b4:	10000426 	beq	r2,zero,17c8 <alt_find_dev+0x54>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    17b8:	84000017 	ldw	r16,0(r16)
    17bc:	003ff806 	br	17a0 <_gp+0xffff78d8>
  }
  
  /* No match found */
  
  return NULL;
    17c0:	0005883a 	mov	r2,zero
    17c4:	00000106 	br	17cc <alt_find_dev+0x58>
    17c8:	8005883a 	mov	r2,r16
}
    17cc:	dfc00417 	ldw	ra,16(sp)
    17d0:	dcc00317 	ldw	r19,12(sp)
    17d4:	dc800217 	ldw	r18,8(sp)
    17d8:	dc400117 	ldw	r17,4(sp)
    17dc:	dc000017 	ldw	r16,0(sp)
    17e0:	dec00504 	addi	sp,sp,20
    17e4:	f800283a 	ret

000017e8 <alt_find_file>:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    17e8:	00800034 	movhi	r2,0
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    17ec:	defffa04 	addi	sp,sp,-24
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    17f0:	1087b704 	addi	r2,r2,7900
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    17f4:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    17f8:	14000017 	ldw	r16,0(r2)
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    17fc:	dd000415 	stw	r20,16(sp)
    1800:	dcc00315 	stw	r19,12(sp)
    1804:	dc800215 	stw	r18,8(sp)
    1808:	dfc00515 	stw	ra,20(sp)
    180c:	dc400115 	stw	r17,4(sp)
    1810:	2027883a 	mov	r19,r4
    1814:	1025883a 	mov	r18,r2
 
  while (next != (alt_dev*) &alt_fs_list)
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
    1818:	05000bc4 	movi	r20,47
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    181c:	84801226 	beq	r16,r18,1868 <alt_find_file+0x80>
  {
    len = strlen(next->name);
    1820:	84400217 	ldw	r17,8(r16)
    1824:	8809883a 	mov	r4,r17
    1828:	00007100 	call	710 <strlen>
    
    if (next->name[len-1] == '/')
    182c:	8887883a 	add	r3,r17,r2
    1830:	18ffffc7 	ldb	r3,-1(r3)
    1834:	1d00011e 	bne	r3,r20,183c <alt_find_file+0x54>
    {
      len -= 1;
    1838:	10bfffc4 	addi	r2,r2,-1
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    183c:	9887883a 	add	r3,r19,r2
    1840:	18c00007 	ldb	r3,0(r3)
    1844:	1d000126 	beq	r3,r20,184c <alt_find_file+0x64>
    1848:	1800051e 	bne	r3,zero,1860 <alt_find_file+0x78>
        !memcmp (next->name, name, len))
    184c:	100d883a 	mov	r6,r2
    1850:	980b883a 	mov	r5,r19
    1854:	8809883a 	mov	r4,r17
    1858:	00019400 	call	1940 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    185c:	10000426 	beq	r2,zero,1870 <alt_find_file+0x88>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    1860:	84000017 	ldw	r16,0(r16)
    1864:	003fed06 	br	181c <_gp+0xffff7954>
  }
  
  /* No match found */
  
  return NULL;     
    1868:	0005883a 	mov	r2,zero
    186c:	00000106 	br	1874 <alt_find_file+0x8c>
    1870:	8005883a 	mov	r2,r16
}
    1874:	dfc00517 	ldw	ra,20(sp)
    1878:	dd000417 	ldw	r20,16(sp)
    187c:	dcc00317 	ldw	r19,12(sp)
    1880:	dc800217 	ldw	r18,8(sp)
    1884:	dc400117 	ldw	r17,4(sp)
    1888:	dc000017 	ldw	r16,0(sp)
    188c:	dec00604 	addi	sp,sp,24
    1890:	f800283a 	ret

00001894 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    1894:	defffb04 	addi	sp,sp,-20
    1898:	dcc00315 	stw	r19,12(sp)
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    189c:	04c00034 	movhi	r19,0
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    18a0:	dc800215 	stw	r18,8(sp)
    18a4:	dc400115 	stw	r17,4(sp)
    18a8:	dc000015 	stw	r16,0(sp)
    18ac:	dfc00415 	stw	ra,16(sp)
    18b0:	2025883a 	mov	r18,r4
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    18b4:	0021883a 	mov	r16,zero
  {
    if (!alt_fd_list[i].dev)
    18b8:	9cc74804 	addi	r19,r19,7456
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    18bc:	04400804 	movi	r17,32
  {
    if (!alt_fd_list[i].dev)
    18c0:	01400304 	movi	r5,12
    18c4:	8009883a 	mov	r4,r16
    18c8:	0000e9c0 	call	e9c <__mulsi3>
    18cc:	9885883a 	add	r2,r19,r2
    18d0:	10c00017 	ldw	r3,0(r2)
    18d4:	1800071e 	bne	r3,zero,18f4 <alt_get_fd+0x60>
    {
      alt_fd_list[i].dev = dev;
    18d8:	14800015 	stw	r18,0(r2)
      if (i > alt_max_fd)
    18dc:	00800034 	movhi	r2,0
    18e0:	1087b404 	addi	r2,r2,7888
    18e4:	10c00017 	ldw	r3,0(r2)
    18e8:	1c00050e 	bge	r3,r16,1900 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
    18ec:	14000015 	stw	r16,0(r2)
    18f0:	00000306 	br	1900 <alt_get_fd+0x6c>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    18f4:	84000044 	addi	r16,r16,1
    18f8:	847ff11e 	bne	r16,r17,18c0 <_gp+0xffff79f8>
 */

int alt_get_fd (alt_dev* dev)
{
  alt_32 i;
  int rc = -EMFILE;
    18fc:	043ffa04 	movi	r16,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
    1900:	8005883a 	mov	r2,r16
    1904:	dfc00417 	ldw	ra,16(sp)
    1908:	dcc00317 	ldw	r19,12(sp)
    190c:	dc800217 	ldw	r18,8(sp)
    1910:	dc400117 	ldw	r17,4(sp)
    1914:	dc000017 	ldw	r16,0(sp)
    1918:	dec00504 	addi	sp,sp,20
    191c:	f800283a 	ret

00001920 <exit>:
    1920:	defffe04 	addi	sp,sp,-8
    1924:	000b883a 	mov	r5,zero
    1928:	dc000015 	stw	r16,0(sp)
    192c:	dfc00115 	stw	ra,4(sp)
    1930:	2021883a 	mov	r16,r4
    1934:	00019700 	call	1970 <__call_exitprocs>
    1938:	8009883a 	mov	r4,r16
    193c:	0001b000 	call	1b00 <_exit>

00001940 <memcmp>:
    1940:	218d883a 	add	r6,r4,r6
    1944:	21800826 	beq	r4,r6,1968 <memcmp+0x28>
    1948:	20800003 	ldbu	r2,0(r4)
    194c:	28c00003 	ldbu	r3,0(r5)
    1950:	10c00226 	beq	r2,r3,195c <memcmp+0x1c>
    1954:	10c5c83a 	sub	r2,r2,r3
    1958:	f800283a 	ret
    195c:	21000044 	addi	r4,r4,1
    1960:	29400044 	addi	r5,r5,1
    1964:	003ff706 	br	1944 <_gp+0xffff7a7c>
    1968:	0005883a 	mov	r2,zero
    196c:	f800283a 	ret

00001970 <__call_exitprocs>:
    1970:	defff504 	addi	sp,sp,-44
    1974:	dd000515 	stw	r20,20(sp)
    1978:	05000034 	movhi	r20,0
    197c:	dc800315 	stw	r18,12(sp)
    1980:	dfc00a15 	stw	ra,40(sp)
    1984:	df000915 	stw	fp,36(sp)
    1988:	ddc00815 	stw	r23,32(sp)
    198c:	dd800715 	stw	r22,28(sp)
    1990:	dd400615 	stw	r21,24(sp)
    1994:	dcc00415 	stw	r19,16(sp)
    1998:	dc400215 	stw	r17,8(sp)
    199c:	dc000115 	stw	r16,4(sp)
    19a0:	d9000015 	stw	r4,0(sp)
    19a4:	2825883a 	mov	r18,r5
    19a8:	a507b204 	addi	r20,r20,7880
    19ac:	a4400017 	ldw	r17,0(r20)
    19b0:	8cc00c17 	ldw	r19,48(r17)
    19b4:	8c400c04 	addi	r17,r17,48
    19b8:	98004526 	beq	r19,zero,1ad0 <__call_exitprocs+0x160>
    19bc:	9c000117 	ldw	r16,4(r19)
    19c0:	00900034 	movhi	r2,16384
    19c4:	10bfffc4 	addi	r2,r2,-1
    19c8:	9d402217 	ldw	r21,136(r19)
    19cc:	85bfffc4 	addi	r22,r16,-1
    19d0:	80a1883a 	add	r16,r16,r2
    19d4:	8421883a 	add	r16,r16,r16
    19d8:	8421883a 	add	r16,r16,r16
    19dc:	ac2f883a 	add	r23,r21,r16
    19e0:	84000204 	addi	r16,r16,8
    19e4:	9c21883a 	add	r16,r19,r16
    19e8:	b0002716 	blt	r22,zero,1a88 <__call_exitprocs+0x118>
    19ec:	90000726 	beq	r18,zero,1a0c <__call_exitprocs+0x9c>
    19f0:	a800041e 	bne	r21,zero,1a04 <__call_exitprocs+0x94>
    19f4:	b5bfffc4 	addi	r22,r22,-1
    19f8:	bdffff04 	addi	r23,r23,-4
    19fc:	843fff04 	addi	r16,r16,-4
    1a00:	003ff906 	br	19e8 <_gp+0xffff7b20>
    1a04:	b9002017 	ldw	r4,128(r23)
    1a08:	913ffa1e 	bne	r18,r4,19f4 <_gp+0xffff7b2c>
    1a0c:	99000117 	ldw	r4,4(r19)
    1a10:	82000017 	ldw	r8,0(r16)
    1a14:	213fffc4 	addi	r4,r4,-1
    1a18:	b100021e 	bne	r22,r4,1a24 <__call_exitprocs+0xb4>
    1a1c:	9d800115 	stw	r22,4(r19)
    1a20:	00000106 	br	1a28 <__call_exitprocs+0xb8>
    1a24:	80000015 	stw	zero,0(r16)
    1a28:	403ff226 	beq	r8,zero,19f4 <_gp+0xffff7b2c>
    1a2c:	9f000117 	ldw	fp,4(r19)
    1a30:	a8000526 	beq	r21,zero,1a48 <__call_exitprocs+0xd8>
    1a34:	00800044 	movi	r2,1
    1a38:	1592983a 	sll	r9,r2,r22
    1a3c:	a9404017 	ldw	r5,256(r21)
    1a40:	494a703a 	and	r5,r9,r5
    1a44:	2800021e 	bne	r5,zero,1a50 <__call_exitprocs+0xe0>
    1a48:	403ee83a 	callr	r8
    1a4c:	00000906 	br	1a74 <__call_exitprocs+0x104>
    1a50:	a9004117 	ldw	r4,260(r21)
    1a54:	4908703a 	and	r4,r9,r4
    1a58:	2000041e 	bne	r4,zero,1a6c <__call_exitprocs+0xfc>
    1a5c:	b9400017 	ldw	r5,0(r23)
    1a60:	d9000017 	ldw	r4,0(sp)
    1a64:	403ee83a 	callr	r8
    1a68:	00000206 	br	1a74 <__call_exitprocs+0x104>
    1a6c:	b9000017 	ldw	r4,0(r23)
    1a70:	403ee83a 	callr	r8
    1a74:	99000117 	ldw	r4,4(r19)
    1a78:	e13fcc1e 	bne	fp,r4,19ac <_gp+0xffff7ae4>
    1a7c:	89000017 	ldw	r4,0(r17)
    1a80:	993fdc26 	beq	r19,r4,19f4 <_gp+0xffff7b2c>
    1a84:	003fc906 	br	19ac <_gp+0xffff7ae4>
    1a88:	00800034 	movhi	r2,0
    1a8c:	10800004 	addi	r2,r2,0
    1a90:	10000f26 	beq	r2,zero,1ad0 <__call_exitprocs+0x160>
    1a94:	99400117 	ldw	r5,4(r19)
    1a98:	99000017 	ldw	r4,0(r19)
    1a9c:	2800091e 	bne	r5,zero,1ac4 <__call_exitprocs+0x154>
    1aa0:	20000826 	beq	r4,zero,1ac4 <__call_exitprocs+0x154>
    1aa4:	89000015 	stw	r4,0(r17)
    1aa8:	a8000226 	beq	r21,zero,1ab4 <__call_exitprocs+0x144>
    1aac:	a809883a 	mov	r4,r21
    1ab0:	00000000 	call	0 <__alt_mem_onchip_memory>
    1ab4:	9809883a 	mov	r4,r19
    1ab8:	00000000 	call	0 <__alt_mem_onchip_memory>
    1abc:	8cc00017 	ldw	r19,0(r17)
    1ac0:	003fbd06 	br	19b8 <_gp+0xffff7af0>
    1ac4:	9823883a 	mov	r17,r19
    1ac8:	2027883a 	mov	r19,r4
    1acc:	003fba06 	br	19b8 <_gp+0xffff7af0>
    1ad0:	dfc00a17 	ldw	ra,40(sp)
    1ad4:	df000917 	ldw	fp,36(sp)
    1ad8:	ddc00817 	ldw	r23,32(sp)
    1adc:	dd800717 	ldw	r22,28(sp)
    1ae0:	dd400617 	ldw	r21,24(sp)
    1ae4:	dd000517 	ldw	r20,20(sp)
    1ae8:	dcc00417 	ldw	r19,16(sp)
    1aec:	dc800317 	ldw	r18,12(sp)
    1af0:	dc400217 	ldw	r17,8(sp)
    1af4:	dc000117 	ldw	r16,4(sp)
    1af8:	dec00b04 	addi	sp,sp,44
    1afc:	f800283a 	ret

00001b00 <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    1b00:	20000226 	beq	r4,zero,1b0c <_exit+0xc>
    ALT_SIM_FAIL();
    1b04:	002af070 	cmpltui	zero,zero,43969
    1b08:	00000106 	br	1b10 <_exit+0x10>
  } else {
    ALT_SIM_PASS();
    1b0c:	002af0b0 	cmpltui	zero,zero,43970
    1b10:	003fff06 	br	1b10 <_gp+0xffff7c48>
