
hangman.elf:     file format elf32-littlenios2
hangman.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000008dc memsz 0x000008dc flags r-x
    LOAD off    0x000018fc vaddr 0x000008fc paddr 0x0000096c align 2**12
         filesz 0x00000070 memsz 0x00000070 flags rw-
    LOAD off    0x000019dc vaddr 0x000009dc paddr 0x000009dc align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00000020  00000020  0000196c  2**0
                  CONTENTS
  2 .text         000006fc  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000001e0  0000071c  0000071c  0000171c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000070  000008fc  0000096c  000018fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  000009dc  000009dc  000019dc  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  000009e8  000009e8  0000196c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000196c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000208  00000000  00000000  00001990  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000190d  00000000  00000000  00001b98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000b44  00000000  00000000  000034a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000b8e  00000000  00000000  00003fe9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000294  00000000  00000000  00004b78  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000893  00000000  00000000  00004e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000432  00000000  00000000  0000569f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00005ad4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000c0  00000000  00000000  00005ae8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00006ae6  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000f  00000000  00000000  00006ae9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00006af8  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00006af9  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  00006afa  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  00006b03  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  00006b0c  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000008  00000000  00000000  00006b15  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000028  00000000  00000000  00006b1d  2**0
                  CONTENTS, READONLY
 26 .jdi          0000694b  00000000  00000000  00006b45  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00059a47  00000000  00000000  0000d490  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000020 l    d  .text	00000000 .text
0000071c l    d  .rodata	00000000 .rodata
000008fc l    d  .rwdata	00000000 .rwdata
000009dc l    d  .bss	00000000 .bss
000009e8 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../hangman_bsp//obj/HAL/src/crt0.o
00000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000006ec l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00000418 g     F .text	0000002c alt_main
0000096c g       *ABS*	00000000 __flash_rwdata_start
000005fc g     F .text	00000038 alt_putstr
00000954 g     O .rwdata	00000004 jtag_uart
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
000009e0 g     O .bss	00000004 alt_argv
00008954 g       *ABS*	00000000 _gp
000008fc g     O .rwdata	00000030 alt_fd_list
00000658 g     F .text	0000005c altera_avalon_jtag_uart_read
00000958 g     O .rwdata	00000004 alt_max_fd
000009e8 g       *ABS*	00000000 __bss_end
000002f4 g     F .text	00000044 alt_getchar
0000092c g     O .rwdata	00000028 alt_dev_null
000006e8 g     F .text	00000004 alt_dcache_flush_all
0000096c g       *ABS*	00000000 __ram_rwdata_end
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory
0000095c g     O .rwdata	00000008 alt_dev_list
000008fc g       *ABS*	00000000 __ram_rodata_end
000009e8 g       *ABS*	00000000 end
00008000 g       *ABS*	00000000 __alt_stack_pointer
000006b4 g     F .text	00000034 altera_avalon_jtag_uart_write
00000444 g     F .text	00000170 alt_printf
00000020 g     F .text	0000003c _start
00000654 g     F .text	00000004 alt_sys_init
000008fc g       *ABS*	00000000 __ram_rwdata_start
0000071c g       *ABS*	00000000 __ram_rodata_start
000009e8 g       *ABS*	00000000 __alt_stack_base
000009dc g       *ABS*	00000000 __bss_start
0000005c g     F .text	00000298 main
000009dc g     O .bss	00000004 alt_envp
0000071c g       *ABS*	00000000 __flash_rodata_start
00000634 g     F .text	00000020 alt_irq_init
000009e4 g     O .bss	00000004 alt_argc
00000964 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
0000096c g       *ABS*	00000000 _edata
000009e8 g       *ABS*	00000000 _end
00000020 g       *ABS*	00000000 __ram_exceptions_end
000006f8 g     F .text	00000008 altera_nios2_qsys_irq_init
00008000 g       *ABS*	00000000 __alt_data_end
0000000c g       .entry	00000000 _exit
00000700 g     F .text	0000001c strlen
000005b4 g     F .text	00000048 alt_putchar
000006f4 g     F .text	00000004 alt_icache_flush_all
00000338 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08400814 	ori	at,at,32
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .text:

00000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  20:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
  24:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
  28:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
  2c:	d6a25514 	ori	gp,gp,35156
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  30:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
  34:	10827714 	ori	r2,r2,2524

    movhi r3, %hi(__bss_end)
  38:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
  3c:	18c27a14 	ori	r3,r3,2536

    beq r2, r3, 1f
  40:	10c00326 	beq	r2,r3,50 <_start+0x30>

0:
    stw zero, (r2)
  44:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  48:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  4c:	10fffd36 	bltu	r2,r3,44 <_gp+0xffff76f0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  50:	00003380 	call	338 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  54:	00004180 	call	418 <alt_main>

00000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  58:	003fff06 	br	58 <_gp+0xffff7704>

0000005c <main>:

	// NOTE: To run this, I disabled a few checks.
	// There is likely something wrong with our config!
	// Look at messed up System ID Checks.

	alt_putstr("\nLetter Hangman! Enter 'g' for guessing, 'p' for proposing: \n");
  5c:	01000034 	movhi	r4,0
#define parallel_in (volatile char *) 0x9050
#define leds (char *) 0x9060
#define switches (volatile char *) 0x9070

int main()
{
  60:	defffc04 	addi	sp,sp,-16

	// NOTE: To run this, I disabled a few checks.
	// There is likely something wrong with our config!
	// Look at messed up System ID Checks.

	alt_putstr("\nLetter Hangman! Enter 'g' for guessing, 'p' for proposing: \n");
  64:	2101c704 	addi	r4,r4,1820
#define parallel_in (volatile char *) 0x9050
#define leds (char *) 0x9060
#define switches (volatile char *) 0x9070

int main()
{
  68:	dfc00315 	stw	ra,12(sp)
  6c:	dc800215 	stw	r18,8(sp)
  70:	dc400115 	stw	r17,4(sp)
  74:	dc000015 	stw	r16,0(sp)

	// NOTE: To run this, I disabled a few checks.
	// There is likely something wrong with our config!
	// Look at messed up System ID Checks.

	alt_putstr("\nLetter Hangman! Enter 'g' for guessing, 'p' for proposing: \n");
  78:	00005fc0 	call	5fc <alt_putstr>

	char in = alt_getchar();
  7c:	00002f40 	call	2f4 <alt_getchar>
	if (in == 'g') {
  80:	11403fcc 	andi	r5,r2,255
  84:	2940201c 	xori	r5,r5,128
  88:	297fe004 	addi	r5,r5,-128
  8c:	008019c4 	movi	r2,103
  90:	2880481e 	bne	r5,r2,1b4 <main+0x158>
		// Guesser
		alt_putstr("\nYou chose guesser! \n");
  94:	01000034 	movhi	r4,0
  98:	2101d704 	addi	r4,r4,1884
  9c:	00005fc0 	call	5fc <alt_putstr>

		// Listen for game start, then clear buffer
		while (!*received_char);
  a0:	00e40c14 	movui	r3,36912
  a4:	18800003 	ldbu	r2,0(r3)
  a8:	10803fcc 	andi	r2,r2,255
  ac:	1080201c 	xori	r2,r2,128
  b0:	10bfe004 	addi	r2,r2,-128
  b4:	103ffb26 	beq	r2,zero,a4 <_gp+0xffff7750>

		if (*parallel_out != START_GAME){
  b8:	00e41014 	movui	r3,36928
  bc:	18800003 	ldbu	r2,0(r3)
  c0:	01401cc4 	movi	r5,115
  c4:	10803fcc 	andi	r2,r2,255
  c8:	1080201c 	xori	r2,r2,128
  cc:	10bfe004 	addi	r2,r2,-128
  d0:	11400826 	beq	r2,r5,f4 <main+0x98>
			alt_printf("\nWanted Game Start=%c, but found %c \n", START_GAME, *parallel_out);
  d4:	19800003 	ldbu	r6,0(r3)
  d8:	01000034 	movhi	r4,0
  dc:	2101dd04 	addi	r4,r4,1908
  e0:	31803fcc 	andi	r6,r6,255
  e4:	3180201c 	xori	r6,r6,128
  e8:	31bfe004 	addi	r6,r6,-128
  ec:	00004440 	call	444 <alt_printf>
  f0:	00002e06 	br	1ac <main+0x150>
			exit(0);
		}

		alt_putstr("\nGame start as guesser! \n");
  f4:	01000034 	movhi	r4,0
  f8:	2101e704 	addi	r4,r4,1948
  fc:	00005fc0 	call	5fc <alt_putstr>

		alt_putstr("\nEnter a letter a guess: \n");
 100:	01000034 	movhi	r4,0
 104:	2101ee04 	addi	r4,r4,1976
 108:	00005fc0 	call	5fc <alt_putstr>
		in = alt_getchar();
 10c:	00002f40 	call	2f4 <alt_getchar>
		alt_printf("Letter Guessed: %c \n", in);
 110:	11403fcc 	andi	r5,r2,255
 114:	2940201c 	xori	r5,r5,128
 118:	01000034 	movhi	r4,0
 11c:	2101f504 	addi	r4,r4,2004
 120:	297fe004 	addi	r5,r5,-128
		}

		alt_putstr("\nGame start as guesser! \n");

		alt_putstr("\nEnter a letter a guess: \n");
		in = alt_getchar();
 124:	1021883a 	mov	r16,r2
		alt_printf("Letter Guessed: %c \n", in);
 128:	00004440 	call	444 <alt_printf>

		// Load guess character
		*parallel_in = in;
 12c:	00a41414 	movui	r2,36944
 130:	14000005 	stb	r16,0(r2)
		*load = 1;
 134:	00c00044 	movi	r3,1
 138:	00a40014 	movui	r2,36864
 13c:	10c00005 	stb	r3,0(r2)
		*transmit_enable = 1;
 140:	00a40414 	movui	r2,36880
 144:	10c00005 	stb	r3,0(r2)
		// Wait for send...
		while (!*sent_char);
 148:	01240814 	movui	r4,36896
 14c:	20c00003 	ldbu	r3,0(r4)
 150:	18c03fcc 	andi	r3,r3,255
 154:	18c0201c 	xori	r3,r3,128
 158:	18ffe004 	addi	r3,r3,-128
 15c:	183ffb26 	beq	r3,zero,14c <_gp+0xffff77f8>
		*sent_char = 0;
 160:	00e40814 	movui	r3,36896
 164:	18000005 	stb	zero,0(r3)
		*transmit_enable = 0;
 168:	10000005 	stb	zero,0(r2)

		// Listen for game status - win or lose
		while (!*received_char);
 16c:	00e40c14 	movui	r3,36912
 170:	18800003 	ldbu	r2,0(r3)
 174:	10803fcc 	andi	r2,r2,255
 178:	1080201c 	xori	r2,r2,128
 17c:	10bfe004 	addi	r2,r2,-128
 180:	103ffb26 	beq	r2,zero,170 <_gp+0xffff781c>
		in = *parallel_out;
 184:	00a41014 	movui	r2,36928
 188:	11c00003 	ldbu	r7,0(r2)

		if (in != WIN_GAME || in != LOSE_GAME) {
			alt_printf("\nWanted Game Win=%c or Game Lose=%c, but found %c \n", WIN_GAME, LOSE_GAME, in);
 18c:	01000034 	movhi	r4,0
 190:	01801b04 	movi	r6,108
 194:	39c03fcc 	andi	r7,r7,255
 198:	39c0201c 	xori	r7,r7,128
 19c:	39ffe004 	addi	r7,r7,-128
 1a0:	01401dc4 	movi	r5,119
 1a4:	2101fb04 	addi	r4,r4,2028
 1a8:	00004440 	call	444 <alt_printf>
			exit(0);
 1ac:	0009883a 	mov	r4,zero
 1b0:	000000c0 	call	c <_exit>
			alt_putstr("\nGuess was wrong!\n");
		}

	} else {
		// Proposer
		alt_printf("\nYou chose proposer, because you entered %c. \n", in);
 1b4:	01000034 	movhi	r4,0
 1b8:	21020804 	addi	r4,r4,2080
 1bc:	00004440 	call	444 <alt_printf>

		alt_putstr("\nEnter a letter for an opponent to guess: \n");
 1c0:	01000034 	movhi	r4,0
 1c4:	21021404 	addi	r4,r4,2128
 1c8:	00005fc0 	call	5fc <alt_putstr>
		char to_guess = alt_getchar();
 1cc:	00002f40 	call	2f4 <alt_getchar>
		alt_printf("Guess target: %c \n", to_guess);
 1d0:	14403fcc 	andi	r17,r2,255
 1d4:	8c40201c 	xori	r17,r17,128
 1d8:	8c7fe004 	addi	r17,r17,-128
 1dc:	01000034 	movhi	r4,0
 1e0:	880b883a 	mov	r5,r17
 1e4:	21021f04 	addi	r4,r4,2172
 1e8:	00004440 	call	444 <alt_printf>

		// Send game start

		// Load start game character
		*parallel_in = START_GAME;
 1ec:	00c01cc4 	movi	r3,115
 1f0:	00a41414 	movui	r2,36944
 1f4:	10c00005 	stb	r3,0(r2)
		*load = 1;
 1f8:	01000044 	movi	r4,1
 1fc:	00e40014 	movui	r3,36864
 200:	19000005 	stb	r4,0(r3)
		*transmit_enable = 1;
 204:	00a40414 	movui	r2,36880
 208:	11000005 	stb	r4,0(r2)

		// Wait for send...
		while (!*sent_char);
 20c:	01640814 	movui	r5,36896
 210:	29000003 	ldbu	r4,0(r5)
 214:	21003fcc 	andi	r4,r4,255
 218:	2100201c 	xori	r4,r4,128
 21c:	213fe004 	addi	r4,r4,-128
 220:	203ffb26 	beq	r4,zero,210 <_gp+0xffff78bc>
		*load = 0;
 224:	18000005 	stb	zero,0(r3)
		*transmit_enable = 0;
 228:	10000005 	stb	zero,0(r2)

		// Listen for game start ack/guess, then clear buffer
		while (!*received_char);
 22c:	00e40c14 	movui	r3,36912
 230:	18800003 	ldbu	r2,0(r3)
 234:	10803fcc 	andi	r2,r2,255
 238:	1080201c 	xori	r2,r2,128
 23c:	10bfe004 	addi	r2,r2,-128
 240:	103ffb26 	beq	r2,zero,230 <_gp+0xffff78dc>
		char received_guess = *parallel_out;
 244:	00a41014 	movui	r2,36928
 248:	14000003 	ldbu	r16,0(r2)

		alt_putstr("\nGame start as proposer! \n");
 24c:	01000034 	movhi	r4,0
 250:	21022404 	addi	r4,r4,2192
		alt_printf("\nReceived guess: %c \n", received_guess);
 254:	84003fcc 	andi	r16,r16,255

		// Listen for game start ack/guess, then clear buffer
		while (!*received_char);
		char received_guess = *parallel_out;

		alt_putstr("\nGame start as proposer! \n");
 258:	00005fc0 	call	5fc <alt_putstr>
		alt_printf("\nReceived guess: %c \n", received_guess);
 25c:	8400201c 	xori	r16,r16,128
 260:	843fe004 	addi	r16,r16,-128
 264:	01000034 	movhi	r4,0
 268:	800b883a 	mov	r5,r16
 26c:	21022b04 	addi	r4,r4,2220
 270:	00004440 	call	444 <alt_printf>
 274:	04a41414 	movui	r18,36944


		if (to_guess == received_guess) {
 278:	8c00051e 	bne	r17,r16,290 <main+0x234>
			alt_putstr("\nGuess was correct!\n");
 27c:	01000034 	movhi	r4,0
 280:	21023104 	addi	r4,r4,2244
 284:	00005fc0 	call	5fc <alt_putstr>
			*parallel_in = WIN_GAME;
 288:	00801dc4 	movi	r2,119
 28c:	00000406 	br	2a0 <main+0x244>
		} else {
			alt_putstr("\nGuess was wrong!\n");
 290:	01000034 	movhi	r4,0
 294:	21023704 	addi	r4,r4,2268
 298:	00005fc0 	call	5fc <alt_putstr>
			*parallel_in = LOSE_GAME;
 29c:	00801b04 	movi	r2,108
 2a0:	90800005 	stb	r2,0(r18)
		}

		// Load game win or loss
		*load = 1;
 2a4:	01000044 	movi	r4,1
 2a8:	00e40014 	movui	r3,36864
 2ac:	19000005 	stb	r4,0(r3)
		*transmit_enable = 1;
 2b0:	00a40414 	movui	r2,36880
 2b4:	11000005 	stb	r4,0(r2)

		// Wait for send...
		while (!*sent_char);
 2b8:	01640814 	movui	r5,36896
 2bc:	29000003 	ldbu	r4,0(r5)
 2c0:	21003fcc 	andi	r4,r4,255
 2c4:	2100201c 	xori	r4,r4,128
 2c8:	213fe004 	addi	r4,r4,-128
 2cc:	203ffb26 	beq	r4,zero,2bc <_gp+0xffff7968>
		*load = 0;
 2d0:	18000005 	stb	zero,0(r3)
		*transmit_enable = 0;
 2d4:	10000005 	stb	zero,0(r2)

	}

	return 0;
}
 2d8:	0005883a 	mov	r2,zero
 2dc:	dfc00317 	ldw	ra,12(sp)
 2e0:	dc800217 	ldw	r18,8(sp)
 2e4:	dc400117 	ldw	r17,4(sp)
 2e8:	dc000017 	ldw	r16,0(sp)
 2ec:	dec00404 	addi	sp,sp,16
 2f0:	f800283a 	ret

000002f4 <alt_getchar>:
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
 2f4:	00800034 	movhi	r2,0
 2f8:	10823f04 	addi	r2,r2,2300
 2fc:	11c00217 	ldw	r7,8(r2)
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
 300:	defffe04 	addi	sp,sp,-8
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
 304:	01000034 	movhi	r4,0
 308:	01800044 	movi	r6,1
 30c:	d80b883a 	mov	r5,sp
 310:	21025504 	addi	r4,r4,2388
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
 314:	dfc00115 	stw	ra,4(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
 318:	00006580 	call	658 <altera_avalon_jtag_uart_read>
 31c:	0080020e 	bge	zero,r2,328 <alt_getchar+0x34>
        return -1;
    }
    return c;
 320:	d8800007 	ldb	r2,0(sp)
 324:	00000106 	br	32c <alt_getchar+0x38>
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
        return -1;
 328:	00bfffc4 	movi	r2,-1
    return c;
#else
    return getchar();
#endif
#endif
}
 32c:	dfc00117 	ldw	ra,4(sp)
 330:	dec00204 	addi	sp,sp,8
 334:	f800283a 	ret

00000338 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 338:	deffff04 	addi	sp,sp,-4
 33c:	01000034 	movhi	r4,0
 340:	01400034 	movhi	r5,0
 344:	dfc00015 	stw	ra,0(sp)
 348:	21023f04 	addi	r4,r4,2300
 34c:	29425b04 	addi	r5,r5,2412

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 350:	2140061e 	bne	r4,r5,36c <alt_load+0x34>
 354:	01000034 	movhi	r4,0
 358:	01400034 	movhi	r5,0
 35c:	21000804 	addi	r4,r4,32
 360:	29400804 	addi	r5,r5,32
 364:	2140121e 	bne	r4,r5,3b0 <alt_load+0x78>
 368:	00000b06 	br	398 <alt_load+0x60>
 36c:	00c00034 	movhi	r3,0
 370:	18c25b04 	addi	r3,r3,2412
 374:	1907c83a 	sub	r3,r3,r4
 378:	0005883a 	mov	r2,zero
  {
    while( to != end )
 37c:	10fff526 	beq	r2,r3,354 <_gp+0xffff7a00>
    {
      *to++ = *from++;
 380:	114f883a 	add	r7,r2,r5
 384:	39c00017 	ldw	r7,0(r7)
 388:	110d883a 	add	r6,r2,r4
 38c:	10800104 	addi	r2,r2,4
 390:	31c00015 	stw	r7,0(r6)
 394:	003ff906 	br	37c <_gp+0xffff7a28>
 398:	01000034 	movhi	r4,0
 39c:	01400034 	movhi	r5,0
 3a0:	2101c704 	addi	r4,r4,1820
 3a4:	2941c704 	addi	r5,r5,1820

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 3a8:	2140101e 	bne	r4,r5,3ec <alt_load+0xb4>
 3ac:	00000b06 	br	3dc <alt_load+0xa4>
 3b0:	00c00034 	movhi	r3,0
 3b4:	18c00804 	addi	r3,r3,32
 3b8:	1907c83a 	sub	r3,r3,r4
 3bc:	0005883a 	mov	r2,zero
  {
    while( to != end )
 3c0:	10fff526 	beq	r2,r3,398 <_gp+0xffff7a44>
    {
      *to++ = *from++;
 3c4:	114f883a 	add	r7,r2,r5
 3c8:	39c00017 	ldw	r7,0(r7)
 3cc:	110d883a 	add	r6,r2,r4
 3d0:	10800104 	addi	r2,r2,4
 3d4:	31c00015 	stw	r7,0(r6)
 3d8:	003ff906 	br	3c0 <_gp+0xffff7a6c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 3dc:	00006e80 	call	6e8 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 3e0:	dfc00017 	ldw	ra,0(sp)
 3e4:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 3e8:	00006f41 	jmpi	6f4 <alt_icache_flush_all>
 3ec:	00c00034 	movhi	r3,0
 3f0:	18c23f04 	addi	r3,r3,2300
 3f4:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 3f8:	0005883a 	mov	r2,zero
  {
    while( to != end )
 3fc:	18bff726 	beq	r3,r2,3dc <_gp+0xffff7a88>
    {
      *to++ = *from++;
 400:	114f883a 	add	r7,r2,r5
 404:	39c00017 	ldw	r7,0(r7)
 408:	110d883a 	add	r6,r2,r4
 40c:	10800104 	addi	r2,r2,4
 410:	31c00015 	stw	r7,0(r6)
 414:	003ff906 	br	3fc <_gp+0xffff7aa8>

00000418 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 418:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 41c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 420:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 424:	00006340 	call	634 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 428:	00006540 	call	654 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 42c:	d1a02217 	ldw	r6,-32632(gp)
 430:	d1602317 	ldw	r5,-32628(gp)
 434:	d1202417 	ldw	r4,-32624(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 438:	dfc00017 	ldw	ra,0(sp)
 43c:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 440:	000005c1 	jmpi	5c <main>

00000444 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
 444:	defff204 	addi	sp,sp,-56
 448:	2005883a 	mov	r2,r4
 44c:	dfc00a15 	stw	ra,40(sp)
 450:	df000915 	stw	fp,36(sp)
 454:	ddc00815 	stw	r23,32(sp)
 458:	dd800715 	stw	r22,28(sp)
 45c:	dd400615 	stw	r21,24(sp)
 460:	dd000515 	stw	r20,20(sp)
 464:	dcc00415 	stw	r19,16(sp)
 468:	dc800315 	stw	r18,12(sp)
 46c:	dc400215 	stw	r17,8(sp)
 470:	dc000115 	stw	r16,4(sp)
 474:	d9400b15 	stw	r5,44(sp)
 478:	d9800c15 	stw	r6,48(sp)
 47c:	d9c00d15 	stw	r7,52(sp)
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 480:	04000944 	movi	r16,37
 */
void 
alt_printf(const char* fmt, ... )
{
	va_list args;
	va_start(args, fmt);
 484:	dd400b04 	addi	r21,sp,44
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
 488:	048018c4 	movi	r18,99
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
 48c:	04c01e04 	movi	r19,120
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
 490:	05001cc4 	movi	r20,115
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 494:	11000007 	ldb	r4,0(r2)
 498:	20003a26 	beq	r4,zero,584 <alt_printf+0x140>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 49c:	24000226 	beq	r4,r16,4a8 <alt_printf+0x64>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 4a0:	14400044 	addi	r17,r2,1
 4a4:	00001406 	br	4f8 <alt_printf+0xb4>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
 4a8:	14400084 	addi	r17,r2,2
 4ac:	10800047 	ldb	r2,1(r2)
 4b0:	10003426 	beq	r2,zero,584 <alt_printf+0x140>
            {
                if (c == '%')
 4b4:	1400021e 	bne	r2,r16,4c0 <alt_printf+0x7c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
 4b8:	8009883a 	mov	r4,r16
 4bc:	00000e06 	br	4f8 <alt_printf+0xb4>
                } 
                else if (c == 'c')
 4c0:	1480051e 	bne	r2,r18,4d8 <alt_printf+0x94>
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
 4c4:	a9000017 	ldw	r4,0(r21)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
 4c8:	ad800104 	addi	r22,r21,4
 4cc:	b02b883a 	mov	r21,r22
                    alt_putchar(v);
 4d0:	00005b40 	call	5b4 <alt_putchar>
 4d4:	00002906 	br	57c <alt_printf+0x138>
                }
                else if (c == 'x')
 4d8:	14c0201e 	bne	r2,r19,55c <alt_printf+0x118>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
 4dc:	adc00017 	ldw	r23,0(r21)
 4e0:	ad400104 	addi	r21,r21,4
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
 4e4:	b8000326 	beq	r23,zero,4f4 <alt_printf+0xb0>
 4e8:	05800704 	movi	r22,28
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
 4ec:	00c003c4 	movi	r3,15
 4f0:	00000306 	br	500 <alt_printf+0xbc>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
 4f4:	01000c04 	movi	r4,48
 4f8:	00005b40 	call	5b4 <alt_putchar>
                        continue;
 4fc:	00001f06 	br	57c <alt_printf+0x138>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
 500:	1d84983a 	sll	r2,r3,r22
 504:	15c4703a 	and	r2,r2,r23
 508:	1000021e 	bne	r2,zero,514 <alt_printf+0xd0>
                        digit_shift -= 4;
 50c:	b5bfff04 	addi	r22,r22,-4
 510:	003ffb06 	br	500 <_gp+0xffff7bac>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 514:	070003c4 	movi	fp,15
                        if (digit <= 9)
 518:	00c00244 	movi	r3,9
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 51c:	b0001716 	blt	r22,zero,57c <alt_printf+0x138>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 520:	e588983a 	sll	r4,fp,r22
 524:	25c8703a 	and	r4,r4,r23
 528:	2588d83a 	srl	r4,r4,r22
                        if (digit <= 9)
 52c:	19000236 	bltu	r3,r4,538 <alt_printf+0xf4>
                            c = '0' + digit;
 530:	21000c04 	addi	r4,r4,48
 534:	00000106 	br	53c <alt_printf+0xf8>
                        else
                            c = 'a' + digit - 10;
 538:	210015c4 	addi	r4,r4,87
                        alt_putchar(c);
 53c:	21003fcc 	andi	r4,r4,255
 540:	2100201c 	xori	r4,r4,128
 544:	213fe004 	addi	r4,r4,-128
 548:	d8c00015 	stw	r3,0(sp)
 54c:	00005b40 	call	5b4 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 550:	b5bfff04 	addi	r22,r22,-4
 554:	d8c00017 	ldw	r3,0(sp)
 558:	003ff006 	br	51c <_gp+0xffff7bc8>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
 55c:	1500071e 	bne	r2,r20,57c <alt_printf+0x138>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
 560:	ad800017 	ldw	r22,0(r21)
 564:	ad400104 	addi	r21,r21,4

                    while(*s)
 568:	b1000007 	ldb	r4,0(r22)
 56c:	20000326 	beq	r4,zero,57c <alt_printf+0x138>
                      alt_putchar(*s++);
 570:	b5800044 	addi	r22,r22,1
 574:	00005b40 	call	5b4 <alt_putchar>
 578:	003ffb06 	br	568 <_gp+0xffff7c14>
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
 57c:	8805883a 	mov	r2,r17
 580:	003fc406 	br	494 <_gp+0xffff7b40>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 584:	dfc00a17 	ldw	ra,40(sp)
 588:	df000917 	ldw	fp,36(sp)
 58c:	ddc00817 	ldw	r23,32(sp)
 590:	dd800717 	ldw	r22,28(sp)
 594:	dd400617 	ldw	r21,24(sp)
 598:	dd000517 	ldw	r20,20(sp)
 59c:	dcc00417 	ldw	r19,16(sp)
 5a0:	dc800317 	ldw	r18,12(sp)
 5a4:	dc400217 	ldw	r17,8(sp)
 5a8:	dc000117 	ldw	r16,4(sp)
 5ac:	dec00e04 	addi	sp,sp,56
 5b0:	f800283a 	ret

000005b4 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 5b4:	defffd04 	addi	sp,sp,-12
 5b8:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
 5bc:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 5c0:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
 5c4:	01000034 	movhi	r4,0
 5c8:	000f883a 	mov	r7,zero
 5cc:	01800044 	movi	r6,1
 5d0:	d80b883a 	mov	r5,sp
 5d4:	21025504 	addi	r4,r4,2388
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 5d8:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
 5dc:	00006b40 	call	6b4 <altera_avalon_jtag_uart_write>
 5e0:	00ffffc4 	movi	r3,-1
 5e4:	10c00126 	beq	r2,r3,5ec <alt_putchar+0x38>
        return -1;
    }
    return c;
 5e8:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
 5ec:	dfc00217 	ldw	ra,8(sp)
 5f0:	dc000117 	ldw	r16,4(sp)
 5f4:	dec00304 	addi	sp,sp,12
 5f8:	f800283a 	ret

000005fc <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
 5fc:	defffe04 	addi	sp,sp,-8
 600:	dc000015 	stw	r16,0(sp)
 604:	dfc00115 	stw	ra,4(sp)
 608:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 60c:	00007000 	call	700 <strlen>
 610:	01000034 	movhi	r4,0
 614:	000f883a 	mov	r7,zero
 618:	100d883a 	mov	r6,r2
 61c:	800b883a 	mov	r5,r16
 620:	21025504 	addi	r4,r4,2388
#else
    return fputs(str, stdout);
#endif
#endif
}
 624:	dfc00117 	ldw	ra,4(sp)
 628:	dc000017 	ldw	r16,0(sp)
 62c:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 630:	00006b41 	jmpi	6b4 <altera_avalon_jtag_uart_write>

00000634 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 634:	deffff04 	addi	sp,sp,-4
 638:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_PROCESSOR, nios2_processor);
 63c:	00006f80 	call	6f8 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 640:	00800044 	movi	r2,1
 644:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 648:	dfc00017 	ldw	ra,0(sp)
 64c:	dec00104 	addi	sp,sp,4
 650:	f800283a 	ret

00000654 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 654:	f800283a 	ret

00000658 <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
 658:	21000017 	ldw	r4,0(r4)

  char * ptr = buffer;
  char * end = buffer + space;
 65c:	298d883a 	add	r6,r5,r6

  while (ptr < end)
 660:	2805883a 	mov	r2,r5

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
 664:	3a10000c 	andi	r8,r7,16384
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
 668:	11800b2e 	bgeu	r2,r6,698 <altera_avalon_jtag_uart_read+0x40>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 66c:	20c00037 	ldwio	r3,0(r4)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
 670:	1a60000c 	andi	r9,r3,32768
 674:	48000326 	beq	r9,zero,684 <altera_avalon_jtag_uart_read+0x2c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 678:	10c00005 	stb	r3,0(r2)
 67c:	10800044 	addi	r2,r2,1
 680:	003ff906 	br	668 <_gp+0xffff7d14>
    else if (ptr != buffer)
 684:	11400226 	beq	r2,r5,690 <altera_avalon_jtag_uart_read+0x38>
      break;   
    
  }

  if (ptr != buffer)
    return ptr - buffer;
 688:	1145c83a 	sub	r2,r2,r5
 68c:	f800283a 	ret

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
 690:	403ff526 	beq	r8,zero,668 <_gp+0xffff7d14>
 694:	00000106 	br	69c <altera_avalon_jtag_uart_read+0x44>
      break;   
    
  }

  if (ptr != buffer)
 698:	117ffb1e 	bne	r2,r5,688 <_gp+0xffff7d34>
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
 69c:	39d0000c 	andi	r7,r7,16384
 6a0:	3800021e 	bne	r7,zero,6ac <altera_avalon_jtag_uart_read+0x54>
    return -EWOULDBLOCK;
  else
    return -EIO;
 6a4:	00bffec4 	movi	r2,-5
 6a8:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
 6ac:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
 6b0:	f800283a 	ret

000006b4 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 6b4:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 6b8:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
 6bc:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 6c0:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 6c4:	2980072e 	bgeu	r5,r6,6e4 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 6c8:	38c00037 	ldwio	r3,0(r7)
 6cc:	18ffffec 	andhi	r3,r3,65535
 6d0:	183ffc26 	beq	r3,zero,6c4 <_gp+0xffff7d70>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 6d4:	28c00007 	ldb	r3,0(r5)
 6d8:	20c00035 	stwio	r3,0(r4)
 6dc:	29400044 	addi	r5,r5,1
 6e0:	003ff806 	br	6c4 <_gp+0xffff7d70>

  return count;
}
 6e4:	f800283a 	ret

000006e8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 6e8:	f800283a 	ret

000006ec <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
 6ec:	3005883a 	mov	r2,r6
 6f0:	f800283a 	ret

000006f4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 6f4:	f800283a 	ret

000006f8 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 6f8:	000170fa 	wrctl	ienable,zero
 6fc:	f800283a 	ret

00000700 <strlen>:
 700:	2005883a 	mov	r2,r4
 704:	10c00007 	ldb	r3,0(r2)
 708:	18000226 	beq	r3,zero,714 <strlen+0x14>
 70c:	10800044 	addi	r2,r2,1
 710:	003ffc06 	br	704 <_gp+0xffff7db0>
 714:	1105c83a 	sub	r2,r2,r4
 718:	f800283a 	ret
