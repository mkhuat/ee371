
sender.elf:     file format elf32-littlenios2
sender.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00000194 memsz 0x00000194 flags r-x
    LOAD off    0x000011b4 vaddr 0x000001b4 paddr 0x000001b8 align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x000011bc vaddr 0x000001bc paddr 0x000001bc align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00000020  00000020  000011b8  2**0
                  CONTENTS
  2 .text         00000194  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000000  000001b4  000001bc  000011b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .rwdata       00000004  000001b4  000001b8  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  000001bc  000001bc  000011bc  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  000001c8  000001c8  000011b8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000011b8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000108  00000000  00000000  000011e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00000778  00000000  00000000  000012e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000408  00000000  00000000  00001a60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000003fb  00000000  00000000  00001e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000118  00000000  00000000  00002264  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000429  00000000  00000000  0000237c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000021  00000000  00000000  000027a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  000027c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000078  00000000  00000000  000027d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000034f6  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000f  00000000  00000000  000034f9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00003508  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00003509  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0000350a  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  00003513  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0000351c  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000008  00000000  00000000  00003525  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000028  00000000  00000000  0000352d  2**0
                  CONTENTS, READONLY
 26 .jdi          0000694b  00000000  00000000  00003555  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00059a47  00000000  00000000  00009ea0  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000020 l    d  .text	00000000 .text
000001b4 l    d  .rodata	00000000 .rodata
000001b4 l    d  .rwdata	00000000 .rwdata
000001bc l    d  .bss	00000000 .bss
000001c8 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../sender_bsp//obj/HAL/src/crt0.o
00000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000154 g     F .text	0000002c alt_main
000001b8 g       *ABS*	00000000 __flash_rwdata_start
000001b4 g     O .rwdata	00000004 jtag_uart
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
000001c0 g     O .bss	00000004 alt_argv
000081b4 g       *ABS*	00000000 _gp
000001c8 g       *ABS*	00000000 __bss_end
000001a4 g     F .text	00000004 alt_dcache_flush_all
000001b8 g       *ABS*	00000000 __ram_rwdata_end
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory
000001b4 g       *ABS*	00000000 __ram_rodata_end
000001c8 g       *ABS*	00000000 end
00008000 g       *ABS*	00000000 __alt_stack_pointer
00000020 g     F .text	0000003c _start
000001a0 g     F .text	00000004 alt_sys_init
000001b4 g       *ABS*	00000000 __ram_rwdata_start
000001b4 g       *ABS*	00000000 __ram_rodata_start
000001c8 g       *ABS*	00000000 __alt_stack_base
000001bc g       *ABS*	00000000 __bss_start
0000005c g     F .text	00000018 main
000001bc g     O .bss	00000004 alt_envp
000001b4 g       *ABS*	00000000 __flash_rodata_start
00000180 g     F .text	00000020 alt_irq_init
000001c4 g     O .bss	00000004 alt_argc
00000020 g       *ABS*	00000000 __ram_exceptions_start
000001b8 g       *ABS*	00000000 _edata
000001c8 g       *ABS*	00000000 _end
00000020 g       *ABS*	00000000 __ram_exceptions_end
000001ac g     F .text	00000008 altera_nios2_qsys_irq_init
00008000 g       *ABS*	00000000 __alt_data_end
0000000c g       .entry	00000000 _exit
000001a8 g     F .text	00000004 alt_icache_flush_all
00000074 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08400814 	ori	at,at,32
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .text:

00000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  20:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
  24:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
  28:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
  2c:	d6a06d14 	ori	gp,gp,33204
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  30:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
  34:	10806f14 	ori	r2,r2,444

    movhi r3, %hi(__bss_end)
  38:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
  3c:	18c07214 	ori	r3,r3,456

    beq r2, r3, 1f
  40:	10c00326 	beq	r2,r3,50 <_start+0x30>

0:
    stw zero, (r2)
  44:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  48:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  4c:	10fffd36 	bltu	r2,r3,44 <_gp+0xffff7e90>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  50:	00000740 	call	74 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  54:	00001540 	call	154 <alt_main>

00000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  58:	003fff06 	br	58 <_gp+0xffff7ea4>

0000005c <main>:
	char in;
	// Sender
	char c = 'k';
	*parallel_out = c;
	*parallel_in = c;
	*load = 1;
  5c:	00800044 	movi	r2,1
  60:	00e40014 	movui	r3,36864
  64:	18800015 	stw	r2,0(r3)
	*transmit_enable = 1;
  68:	00e40414 	movui	r3,36880
  6c:	18800015 	stw	r2,0(r3)
  70:	003fff06 	br	70 <_gp+0xffff7ebc>

00000074 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  74:	deffff04 	addi	sp,sp,-4
  78:	01000034 	movhi	r4,0
  7c:	01400034 	movhi	r5,0
  80:	dfc00015 	stw	ra,0(sp)
  84:	21006d04 	addi	r4,r4,436
  88:	29406e04 	addi	r5,r5,440

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  8c:	2140061e 	bne	r4,r5,a8 <alt_load+0x34>
  90:	01000034 	movhi	r4,0
  94:	01400034 	movhi	r5,0
  98:	21000804 	addi	r4,r4,32
  9c:	29400804 	addi	r5,r5,32
  a0:	2140121e 	bne	r4,r5,ec <alt_load+0x78>
  a4:	00000b06 	br	d4 <alt_load+0x60>
  a8:	00c00034 	movhi	r3,0
  ac:	18c06e04 	addi	r3,r3,440
  b0:	1907c83a 	sub	r3,r3,r4
  b4:	0005883a 	mov	r2,zero
  {
    while( to != end )
  b8:	10fff526 	beq	r2,r3,90 <_gp+0xffff7edc>
    {
      *to++ = *from++;
  bc:	114f883a 	add	r7,r2,r5
  c0:	39c00017 	ldw	r7,0(r7)
  c4:	110d883a 	add	r6,r2,r4
  c8:	10800104 	addi	r2,r2,4
  cc:	31c00015 	stw	r7,0(r6)
  d0:	003ff906 	br	b8 <_gp+0xffff7f04>
  d4:	01000034 	movhi	r4,0
  d8:	01400034 	movhi	r5,0
  dc:	21006d04 	addi	r4,r4,436
  e0:	29406d04 	addi	r5,r5,436

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  e4:	2140101e 	bne	r4,r5,128 <alt_load+0xb4>
  e8:	00000b06 	br	118 <alt_load+0xa4>
  ec:	00c00034 	movhi	r3,0
  f0:	18c00804 	addi	r3,r3,32
  f4:	1907c83a 	sub	r3,r3,r4
  f8:	0005883a 	mov	r2,zero
  {
    while( to != end )
  fc:	10fff526 	beq	r2,r3,d4 <_gp+0xffff7f20>
    {
      *to++ = *from++;
 100:	114f883a 	add	r7,r2,r5
 104:	39c00017 	ldw	r7,0(r7)
 108:	110d883a 	add	r6,r2,r4
 10c:	10800104 	addi	r2,r2,4
 110:	31c00015 	stw	r7,0(r6)
 114:	003ff906 	br	fc <_gp+0xffff7f48>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 118:	00001a40 	call	1a4 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 11c:	dfc00017 	ldw	ra,0(sp)
 120:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 124:	00001a81 	jmpi	1a8 <alt_icache_flush_all>
 128:	00c00034 	movhi	r3,0
 12c:	18c06d04 	addi	r3,r3,436
 130:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 134:	0005883a 	mov	r2,zero
  {
    while( to != end )
 138:	18bff726 	beq	r3,r2,118 <_gp+0xffff7f64>
    {
      *to++ = *from++;
 13c:	114f883a 	add	r7,r2,r5
 140:	39c00017 	ldw	r7,0(r7)
 144:	110d883a 	add	r6,r2,r4
 148:	10800104 	addi	r2,r2,4
 14c:	31c00015 	stw	r7,0(r6)
 150:	003ff906 	br	138 <_gp+0xffff7f84>

00000154 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 154:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 158:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 15c:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 160:	00001800 	call	180 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 164:	00001a00 	call	1a0 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 168:	d1a00217 	ldw	r6,-32760(gp)
 16c:	d1600317 	ldw	r5,-32756(gp)
 170:	d1200417 	ldw	r4,-32752(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 174:	dfc00017 	ldw	ra,0(sp)
 178:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 17c:	000005c1 	jmpi	5c <main>

00000180 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 180:	deffff04 	addi	sp,sp,-4
 184:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_PROCESSOR, nios2_processor);
 188:	00001ac0 	call	1ac <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 18c:	00800044 	movi	r2,1
 190:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 194:	dfc00017 	ldw	ra,0(sp)
 198:	dec00104 	addi	sp,sp,4
 19c:	f800283a 	ret

000001a0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 1a0:	f800283a 	ret

000001a4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 1a4:	f800283a 	ret

000001a8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 1a8:	f800283a 	ret

000001ac <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 1ac:	000170fa 	wrctl	ienable,zero
 1b0:	f800283a 	ret
