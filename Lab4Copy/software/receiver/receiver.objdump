
receiver.elf:     file format elf32-littlenios2
receiver.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000003cc memsz 0x000003cc flags r-x
    LOAD off    0x000013ec vaddr 0x000003ec paddr 0x000003f0 align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x000013f4 vaddr 0x000003f4 paddr 0x000003f4 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00000020  00000020  000013f0  2**0
                  CONTENTS
  2 .text         000003b8  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000014  000003d8  000003d8  000013d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000004  000003ec  000003f0  000013ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  000003f4  000003f4  000013f4  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00000400  00000400  000013f0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000013f0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000168  00000000  00000000  00001418  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00000b8b  00000000  00000000  00001580  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000068d  00000000  00000000  0000210b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000067a  00000000  00000000  00002798  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000001c8  00000000  00000000  00002e14  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000504  00000000  00000000  00002fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000002b6  00000000  00000000  000034e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00003798  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000090  00000000  00000000  000037a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000045b2  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000f  00000000  00000000  000045b5  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000045c4  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000045c5  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  000045c6  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  000045cf  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  000045d8  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000008  00000000  00000000  000045e1  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000028  00000000  00000000  000045e9  2**0
                  CONTENTS, READONLY
 26 .jdi          0000694b  00000000  00000000  00004611  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00059a47  00000000  00000000  0000af5c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000020 l    d  .text	00000000 .text
000003d8 l    d  .rodata	00000000 .rodata
000003ec l    d  .rwdata	00000000 .rwdata
000003f4 l    d  .bss	00000000 .bss
00000400 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../receiver_bsp//obj/HAL/src/crt0.o
00000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
0000018c g     F .text	0000002c alt_main
000003f0 g       *ABS*	00000000 __flash_rwdata_start
000003ec g     O .rwdata	00000004 jtag_uart
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
000003f8 g     O .bss	00000004 alt_argv
000083ec g       *ABS*	00000000 _gp
00000400 g       *ABS*	00000000 __bss_end
000003c8 g     F .text	00000004 alt_dcache_flush_all
000003f0 g       *ABS*	00000000 __ram_rwdata_end
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory
000003ec g       *ABS*	00000000 __ram_rodata_end
00000400 g       *ABS*	00000000 end
00008000 g       *ABS*	00000000 __alt_stack_pointer
00000394 g     F .text	00000034 altera_avalon_jtag_uart_write
000001b8 g     F .text	00000170 alt_printf
00000020 g     F .text	0000003c _start
00000390 g     F .text	00000004 alt_sys_init
000003ec g       *ABS*	00000000 __ram_rwdata_start
000003d8 g       *ABS*	00000000 __ram_rodata_start
00000400 g       *ABS*	00000000 __alt_stack_base
000003f4 g       *ABS*	00000000 __bss_start
0000005c g     F .text	00000050 main
000003f4 g     O .bss	00000004 alt_envp
000003d8 g       *ABS*	00000000 __flash_rodata_start
00000370 g     F .text	00000020 alt_irq_init
000003fc g     O .bss	00000004 alt_argc
00000020 g       *ABS*	00000000 __ram_exceptions_start
000003f0 g       *ABS*	00000000 _edata
00000400 g       *ABS*	00000000 _end
00000020 g       *ABS*	00000000 __ram_exceptions_end
000003d0 g     F .text	00000008 altera_nios2_qsys_irq_init
00008000 g       *ABS*	00000000 __alt_data_end
0000000c g       .entry	00000000 _exit
00000328 g     F .text	00000048 alt_putchar
000003cc g     F .text	00000004 alt_icache_flush_all
000000ac g     F .text	000000e0 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08400814 	ori	at,at,32
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .text:

00000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  20:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
  24:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
  28:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
  2c:	d6a0fb14 	ori	gp,gp,33772
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  30:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
  34:	1080fd14 	ori	r2,r2,1012

    movhi r3, %hi(__bss_end)
  38:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
  3c:	18c10014 	ori	r3,r3,1024

    beq r2, r3, 1f
  40:	10c00326 	beq	r2,r3,50 <_start+0x30>

0:
    stw zero, (r2)
  44:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  48:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  4c:	10fffd36 	bltu	r2,r3,44 <_gp+0xffff7c58>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  50:	00000ac0 	call	ac <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  54:	000018c0 	call	18c <alt_main>

00000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  58:	003fff06 	br	58 <_gp+0xffff7c6c>

0000005c <main>:
int main()
{ 
	// Receiver
	while (1) {
		// alt_printf("parallel_out=%d \n", *parallel_out);
		if (*received_char) {
  5c:	00e40c14 	movui	r3,36912
  60:	18800003 	ldbu	r2,0(r3)
  64:	10803fcc 	andi	r2,r2,255
  68:	1080201c 	xori	r2,r2,128
  6c:	10bfe004 	addi	r2,r2,-128
  70:	103ffb26 	beq	r2,zero,60 <_gp+0xffff7c74>
#define parallel_out (volatile char *) 0x9040
#define parallel_in (volatile char *) 0x9050
#define leds (char *) 0x9060
#define switches (volatile char *) 0x9070
int main()
{ 
  74:	deffff04 	addi	sp,sp,-4
  78:	dfc00015 	stw	ra,0(sp)
	// Receiver
	while (1) {
		// alt_printf("parallel_out=%d \n", *parallel_out);
		if (*received_char) {
			alt_printf("parallel_out=%c \n", *parallel_out);
  7c:	00a41014 	movui	r2,36928
  80:	11400003 	ldbu	r5,0(r2)
  84:	01000034 	movhi	r4,0
  88:	2100f604 	addi	r4,r4,984
  8c:	29403fcc 	andi	r5,r5,255
  90:	2940201c 	xori	r5,r5,128
  94:	297fe004 	addi	r5,r5,-128
  98:	00001b80 	call	1b8 <alt_printf>
			break;
		}
	}

  return 0;
}
  9c:	0005883a 	mov	r2,zero
  a0:	dfc00017 	ldw	ra,0(sp)
  a4:	dec00104 	addi	sp,sp,4
  a8:	f800283a 	ret

000000ac <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  ac:	deffff04 	addi	sp,sp,-4
  b0:	01000034 	movhi	r4,0
  b4:	01400034 	movhi	r5,0
  b8:	dfc00015 	stw	ra,0(sp)
  bc:	2100fb04 	addi	r4,r4,1004
  c0:	2940fc04 	addi	r5,r5,1008

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  c4:	2140061e 	bne	r4,r5,e0 <alt_load+0x34>
  c8:	01000034 	movhi	r4,0
  cc:	01400034 	movhi	r5,0
  d0:	21000804 	addi	r4,r4,32
  d4:	29400804 	addi	r5,r5,32
  d8:	2140121e 	bne	r4,r5,124 <alt_load+0x78>
  dc:	00000b06 	br	10c <alt_load+0x60>
  e0:	00c00034 	movhi	r3,0
  e4:	18c0fc04 	addi	r3,r3,1008
  e8:	1907c83a 	sub	r3,r3,r4
  ec:	0005883a 	mov	r2,zero
  {
    while( to != end )
  f0:	10fff526 	beq	r2,r3,c8 <_gp+0xffff7cdc>
    {
      *to++ = *from++;
  f4:	114f883a 	add	r7,r2,r5
  f8:	39c00017 	ldw	r7,0(r7)
  fc:	110d883a 	add	r6,r2,r4
 100:	10800104 	addi	r2,r2,4
 104:	31c00015 	stw	r7,0(r6)
 108:	003ff906 	br	f0 <_gp+0xffff7d04>
 10c:	01000034 	movhi	r4,0
 110:	01400034 	movhi	r5,0
 114:	2100f604 	addi	r4,r4,984
 118:	2940f604 	addi	r5,r5,984

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 11c:	2140101e 	bne	r4,r5,160 <alt_load+0xb4>
 120:	00000b06 	br	150 <alt_load+0xa4>
 124:	00c00034 	movhi	r3,0
 128:	18c00804 	addi	r3,r3,32
 12c:	1907c83a 	sub	r3,r3,r4
 130:	0005883a 	mov	r2,zero
  {
    while( to != end )
 134:	10fff526 	beq	r2,r3,10c <_gp+0xffff7d20>
    {
      *to++ = *from++;
 138:	114f883a 	add	r7,r2,r5
 13c:	39c00017 	ldw	r7,0(r7)
 140:	110d883a 	add	r6,r2,r4
 144:	10800104 	addi	r2,r2,4
 148:	31c00015 	stw	r7,0(r6)
 14c:	003ff906 	br	134 <_gp+0xffff7d48>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 150:	00003c80 	call	3c8 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 154:	dfc00017 	ldw	ra,0(sp)
 158:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 15c:	00003cc1 	jmpi	3cc <alt_icache_flush_all>
 160:	00c00034 	movhi	r3,0
 164:	18c0fb04 	addi	r3,r3,1004
 168:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 16c:	0005883a 	mov	r2,zero
  {
    while( to != end )
 170:	18bff726 	beq	r3,r2,150 <_gp+0xffff7d64>
    {
      *to++ = *from++;
 174:	114f883a 	add	r7,r2,r5
 178:	39c00017 	ldw	r7,0(r7)
 17c:	110d883a 	add	r6,r2,r4
 180:	10800104 	addi	r2,r2,4
 184:	31c00015 	stw	r7,0(r6)
 188:	003ff906 	br	170 <_gp+0xffff7d84>

0000018c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 18c:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 190:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 194:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 198:	00003700 	call	370 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 19c:	00003900 	call	390 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 1a0:	d1a00217 	ldw	r6,-32760(gp)
 1a4:	d1600317 	ldw	r5,-32756(gp)
 1a8:	d1200417 	ldw	r4,-32752(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 1ac:	dfc00017 	ldw	ra,0(sp)
 1b0:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 1b4:	000005c1 	jmpi	5c <main>

000001b8 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
 1b8:	defff204 	addi	sp,sp,-56
 1bc:	2005883a 	mov	r2,r4
 1c0:	dfc00a15 	stw	ra,40(sp)
 1c4:	df000915 	stw	fp,36(sp)
 1c8:	ddc00815 	stw	r23,32(sp)
 1cc:	dd800715 	stw	r22,28(sp)
 1d0:	dd400615 	stw	r21,24(sp)
 1d4:	dd000515 	stw	r20,20(sp)
 1d8:	dcc00415 	stw	r19,16(sp)
 1dc:	dc800315 	stw	r18,12(sp)
 1e0:	dc400215 	stw	r17,8(sp)
 1e4:	dc000115 	stw	r16,4(sp)
 1e8:	d9400b15 	stw	r5,44(sp)
 1ec:	d9800c15 	stw	r6,48(sp)
 1f0:	d9c00d15 	stw	r7,52(sp)
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 1f4:	04000944 	movi	r16,37
 */
void 
alt_printf(const char* fmt, ... )
{
	va_list args;
	va_start(args, fmt);
 1f8:	dd400b04 	addi	r21,sp,44
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
 1fc:	048018c4 	movi	r18,99
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
 200:	04c01e04 	movi	r19,120
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
 204:	05001cc4 	movi	r20,115
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 208:	11000007 	ldb	r4,0(r2)
 20c:	20003a26 	beq	r4,zero,2f8 <alt_printf+0x140>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 210:	24000226 	beq	r4,r16,21c <alt_printf+0x64>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 214:	14400044 	addi	r17,r2,1
 218:	00001406 	br	26c <alt_printf+0xb4>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
 21c:	14400084 	addi	r17,r2,2
 220:	10800047 	ldb	r2,1(r2)
 224:	10003426 	beq	r2,zero,2f8 <alt_printf+0x140>
            {
                if (c == '%')
 228:	1400021e 	bne	r2,r16,234 <alt_printf+0x7c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
 22c:	8009883a 	mov	r4,r16
 230:	00000e06 	br	26c <alt_printf+0xb4>
                } 
                else if (c == 'c')
 234:	1480051e 	bne	r2,r18,24c <alt_printf+0x94>
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
 238:	a9000017 	ldw	r4,0(r21)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
 23c:	ad800104 	addi	r22,r21,4
 240:	b02b883a 	mov	r21,r22
                    alt_putchar(v);
 244:	00003280 	call	328 <alt_putchar>
 248:	00002906 	br	2f0 <alt_printf+0x138>
                }
                else if (c == 'x')
 24c:	14c0201e 	bne	r2,r19,2d0 <alt_printf+0x118>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
 250:	adc00017 	ldw	r23,0(r21)
 254:	ad400104 	addi	r21,r21,4
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
 258:	b8000326 	beq	r23,zero,268 <alt_printf+0xb0>
 25c:	05800704 	movi	r22,28
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
 260:	00c003c4 	movi	r3,15
 264:	00000306 	br	274 <alt_printf+0xbc>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
 268:	01000c04 	movi	r4,48
 26c:	00003280 	call	328 <alt_putchar>
                        continue;
 270:	00001f06 	br	2f0 <alt_printf+0x138>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
 274:	1d84983a 	sll	r2,r3,r22
 278:	15c4703a 	and	r2,r2,r23
 27c:	1000021e 	bne	r2,zero,288 <alt_printf+0xd0>
                        digit_shift -= 4;
 280:	b5bfff04 	addi	r22,r22,-4
 284:	003ffb06 	br	274 <_gp+0xffff7e88>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 288:	070003c4 	movi	fp,15
                        if (digit <= 9)
 28c:	00c00244 	movi	r3,9
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 290:	b0001716 	blt	r22,zero,2f0 <alt_printf+0x138>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 294:	e588983a 	sll	r4,fp,r22
 298:	25c8703a 	and	r4,r4,r23
 29c:	2588d83a 	srl	r4,r4,r22
                        if (digit <= 9)
 2a0:	19000236 	bltu	r3,r4,2ac <alt_printf+0xf4>
                            c = '0' + digit;
 2a4:	21000c04 	addi	r4,r4,48
 2a8:	00000106 	br	2b0 <alt_printf+0xf8>
                        else
                            c = 'a' + digit - 10;
 2ac:	210015c4 	addi	r4,r4,87
                        alt_putchar(c);
 2b0:	21003fcc 	andi	r4,r4,255
 2b4:	2100201c 	xori	r4,r4,128
 2b8:	213fe004 	addi	r4,r4,-128
 2bc:	d8c00015 	stw	r3,0(sp)
 2c0:	00003280 	call	328 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 2c4:	b5bfff04 	addi	r22,r22,-4
 2c8:	d8c00017 	ldw	r3,0(sp)
 2cc:	003ff006 	br	290 <_gp+0xffff7ea4>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
 2d0:	1500071e 	bne	r2,r20,2f0 <alt_printf+0x138>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
 2d4:	ad800017 	ldw	r22,0(r21)
 2d8:	ad400104 	addi	r21,r21,4

                    while(*s)
 2dc:	b1000007 	ldb	r4,0(r22)
 2e0:	20000326 	beq	r4,zero,2f0 <alt_printf+0x138>
                      alt_putchar(*s++);
 2e4:	b5800044 	addi	r22,r22,1
 2e8:	00003280 	call	328 <alt_putchar>
 2ec:	003ffb06 	br	2dc <_gp+0xffff7ef0>
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
 2f0:	8805883a 	mov	r2,r17
 2f4:	003fc406 	br	208 <_gp+0xffff7e1c>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 2f8:	dfc00a17 	ldw	ra,40(sp)
 2fc:	df000917 	ldw	fp,36(sp)
 300:	ddc00817 	ldw	r23,32(sp)
 304:	dd800717 	ldw	r22,28(sp)
 308:	dd400617 	ldw	r21,24(sp)
 30c:	dd000517 	ldw	r20,20(sp)
 310:	dcc00417 	ldw	r19,16(sp)
 314:	dc800317 	ldw	r18,12(sp)
 318:	dc400217 	ldw	r17,8(sp)
 31c:	dc000117 	ldw	r16,4(sp)
 320:	dec00e04 	addi	sp,sp,56
 324:	f800283a 	ret

00000328 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 328:	defffd04 	addi	sp,sp,-12
 32c:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
 330:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 334:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
 338:	01000034 	movhi	r4,0
 33c:	000f883a 	mov	r7,zero
 340:	01800044 	movi	r6,1
 344:	d80b883a 	mov	r5,sp
 348:	2100fb04 	addi	r4,r4,1004
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 34c:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
 350:	00003940 	call	394 <altera_avalon_jtag_uart_write>
 354:	00ffffc4 	movi	r3,-1
 358:	10c00126 	beq	r2,r3,360 <alt_putchar+0x38>
        return -1;
    }
    return c;
 35c:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
 360:	dfc00217 	ldw	ra,8(sp)
 364:	dc000117 	ldw	r16,4(sp)
 368:	dec00304 	addi	sp,sp,12
 36c:	f800283a 	ret

00000370 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 370:	deffff04 	addi	sp,sp,-4
 374:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_PROCESSOR, nios2_processor);
 378:	00003d00 	call	3d0 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 37c:	00800044 	movi	r2,1
 380:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 384:	dfc00017 	ldw	ra,0(sp)
 388:	dec00104 	addi	sp,sp,4
 38c:	f800283a 	ret

00000390 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 390:	f800283a 	ret

00000394 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 394:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 398:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
 39c:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 3a0:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 3a4:	2980072e 	bgeu	r5,r6,3c4 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 3a8:	38c00037 	ldwio	r3,0(r7)
 3ac:	18ffffec 	andhi	r3,r3,65535
 3b0:	183ffc26 	beq	r3,zero,3a4 <_gp+0xffff7fb8>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 3b4:	28c00007 	ldb	r3,0(r5)
 3b8:	20c00035 	stwio	r3,0(r4)
 3bc:	29400044 	addi	r5,r5,1
 3c0:	003ff806 	br	3a4 <_gp+0xffff7fb8>

  return count;
}
 3c4:	f800283a 	ret

000003c8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 3c8:	f800283a 	ret

000003cc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 3cc:	f800283a 	ret

000003d0 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 3d0:	000170fa 	wrctl	ienable,zero
 3d4:	f800283a 	ret
