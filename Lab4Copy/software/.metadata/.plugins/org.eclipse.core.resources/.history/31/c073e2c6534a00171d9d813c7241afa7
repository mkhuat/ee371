/* 
 * "Small Hello World" example. 
 * 
 * This example prints 'Hello from Nios II' to the STDOUT stream. It runs on
 * the Nios II 'standard', 'full_featured', 'fast', and 'low_cost' example 
 * designs. It requires a STDOUT  device in your system's hardware. 
 *
 * The purpose of this example is to demonstrate the smallest possible Hello 
 * World application, using the Nios II HAL library.  The memory footprint
 * of this hosted application is ~332 bytes by default using the standard 
 * reference design.  For a more fully featured Hello World application
 * example, see the example titled "Hello World".
 *
 * The memory footprint of this example has been reduced by making the
 * following changes to the normal "Hello World" example.
 * Check in the Nios II Software Developers Manual for a more complete 
 * description.
 * 
 * In the SW Application project (small_hello_world):
 *
 *  - In the C/C++ Build page
 * 
 *    - Set the Optimization Level to -Os
 * 
 * In System Library project (small_hello_world_syslib):
 *  - In the C/C++ Build page
 * 
 *    - Set the Optimization Level to -Os
 * 
 *    - Define the preprocessor option ALT_NO_INSTRUCTION_EMULATION 
 *      This removes software exception handling, which means that you cannot 
 *      run code compiled for Nios II cpu with a hardware multiplier on a core 
 *      without a the multiply unit. Check the Nios II Software Developers 
 *      Manual for more details.
 *
 *  - In the System Library page:
 *    - Set Periodic system timer and Timestamp timer to none
 *      This prevents the automatic inclusion of the timer driver.
 *
 *    - Set Max file descriptors to 4
 *      This reduces the size of the file handle pool.
 *
 *    - Check Main function does not exit
 *    - Uncheck Clean exit (flush buffers)
 *      This removes the unneeded call to exit when main returns, since it
 *      won't.
 *
 *    - Check Don't use C++
 *      This builds without the C++ support code.
 *
 *    - Check Small C library
 *      This uses a reduced functionality C library, which lacks  
 *      support for buffering, file IO, floating point and getch(), etc. 
 *      Check the Nios II Software Developers Manual for a complete list.
 *
 *    - Check Reduced device drivers
 *      This uses reduced functionality drivers if they're available. For the
 *      standard design this means you get polled UART and JTAG UART drivers,
 *      no support for the LCD driver and you lose the ability to program 
 *      CFI compliant flash devices.
 *
 *    - Check Access device drivers directly
 *      This bypasses the device file system to access device drivers directly.
 *      This eliminates the space required for the device file system services.
 *      It also provides a HAL version of libc services that access the drivers
 *      directly, further reducing space. Only a limited number of libc
 *      functions are available in this configuration.
 *
 *    - Use ALT versions of stdio routines:
 *
 *           Function                  Description
 *        ===============  =====================================
 *        alt_printf       Only supports %s, %x, and %c ( < 1 Kbyte)
 *        alt_putstr       Smaller overhead than puts with direct drivers
 *                         Note this function doesn't add a newline.
 *        alt_putchar      Smaller overhead than putchar with direct drivers
 *        alt_getchar      Smaller overhead than getchar with direct drivers
 *
 */

#include "sys/alt_stdio.h"

#define sent_char (volatile char *) 0x9080
#define transmit_enable (volatile char *) 0x9070
#define received_char (volatile char *) 0x9090
#define load (volatile char *) 0x9060
#define parallel_out (volatile char *) 0x90a0
#define parallel_in (volatile char *) 0x90b0
#define leds (char *) 0x90c0
#define switches (volatile char *) 0x90d0
#define hex0 (volatile char *) 0x9050
#define hex1 (volatile char *) 0x9040
#define hex2 (volatile char *) 0x9030
#define hex3 (volatile char *) 0x9020
#define hex4 (volatile char *) 0x9010
#define hex5 (volatile char *) 0x9000

void write_to_hex(char to_write, int hex_idx) {

	switch (hex_idx) {
	case 0:
		*hex0 = to_write;
		break;
	case 1:
		*hex1 = to_write;
		break;
	case 2:
		*hex2 = to_write;
		break;
	case 3:
		*hex3 = to_write;
		break;
	case 4:
		*hex4 = to_write;
		break;
	case 5:
		*hex5 = to_write;
		break;
	}
}

int main()
{
	char WIN_GAME = 'w';
	char LOSE_GAME = 'l';

	alt_putstr("\nHEX Word Hangman! Enter 'g' for guessing, 'p' for proposing > ");

	char in = alt_getchar();
	alt_getchar(); // To strip out the enter!
	if (in == 'g') {
		// Guesser
		alt_putstr("\nGame start as guesser! \n");

		// Listen for game start
		// This should be the length of the HEX 
		while (!*received_char);
		char length_char = *parallel_out;
		int length = length_char - 48;
		*leds = length_char;


		alt_printf("\nGuess must be length: %c \n", length_char);
		alt_printf("\nEnter guess >  ");

		char input_buffer[length];
		for (int i = 0; i < length; i++) {
			input_buffer[i] = alt_getchar();
		}
		alt_getchar(); // Read in enter


		alt_printf("Word Guessed: ");
		for (int i = 0; i < length; i++) {
			alt_printf("%c", input_buffer[i]);
		}
		alt_printf("\n");

		// Load guess characters one by one
		for (int i = 0; i < length; i++) {
			*parallel_in = input_buffer[i];
			write_to_hex(input_buffer[i], i);

			*load = 1;
			*transmit_enable = 1;

			// Wait for line to clear
			while (*sent_char);

			// Wait for send...
			while (!*sent_char);
			*sent_char = 0;
			*transmit_enable = 0;

			// Wait for receive response
			// TODO: Do we want to perform validation with parallel_out?
			while (!*received_char);
		}

		// Final response will indicate whether the guess was correct
		in = *parallel_out;
		*leds = in;

		if (in != WIN_GAME && in != LOSE_GAME) {
			alt_printf("\nWanted Game Win=%c or Game Lose=%c, but found %c \n", WIN_GAME, LOSE_GAME, in);
			exit(0);
		}

		if (in == WIN_GAME) {
			alt_putstr("\nGuess was correct!\n");
		} else {
			alt_putstr("\nGuess was wrong!\n");
		}

	} else {
		// Proposer
		alt_printf("\nYou chose proposer, because you entered %c. \n", in);

		alt_putstr("\nEnter a guess length: \n");
		int char_length = alt_getchar(); // Treat char as int...
		int length = char_length - 48;
		alt_getchar(); // Read in enter

		alt_printf("\nEnter a guess of length %c: \n", char_length);
		
		// Read in a guess, character by character
		char input_buffer[length];
		for (int i = 0; i < length; i++) {
			input_buffer[i] = alt_getchar();
		}
		alt_getchar(); // Read in enter


		// Print out what you entered...
		alt_printf("Word to Guess: ");
		for (int i = 0; i < length; i++) {
			alt_printf("%c", input_buffer[i]);
			write_to_hex(input_buffer[i], i);
		}
		alt_printf("\n");


		// Send game start, which is the length of the word to guess

		// Load start game character
		*parallel_in = char_length;
		*load = 1;
		*transmit_enable = 1;

		// Wait for send...
		while (!*sent_char);
		*load = 0;
		*transmit_enable = 0;


		// Read in guess...
		char guess_buffer[length];
		for (int i = 0; i < length; i++) {

			// Wait for receive a character...
			while (!*received_char);
			char received_guess = *parallel_out;
			*leds = received_guess;
			guess_buffer[i] = received_guess;
			write_to_hex(guess_buffer[i], i);

			// Received OK - we can accept another character after sending a response
			// Our response will be win or lose for the final char
			if (i == length - 1) {
				break;
			}
			// Load the index of the last character we read in...
			*parallel_in = i;
			*load = 1;
			*transmit_enable = 1;

			// Wait for line to clear
			while (*sent_char);

			// Wait for send...
			while (!*sent_char);
			*sent_char = 0;
			*transmit_enable = 0;
		}

		alt_putstr("\nGame start as proposer! \n");

		// Print out what received as a guess...
		// Validate as you print...
		int correct = 1;
		alt_printf("\nReceived guess: ");
		for (int i = 0; i < length; i++) {
			alt_printf("%c", guess_buffer[i]);
			if (guess_buffer[i] != input_buffer[i])
				correct = 0;
		}
		alt_printf("\n");

		if (correct) {
			alt_putstr("\nGuess was correct!\n");
			*parallel_in = WIN_GAME;
		} else {
			alt_putstr("\nGuess was wrong!\n");
			*parallel_in = LOSE_GAME;
		}

		// Load game win or loss
		*load = 1;
		*transmit_enable = 1;

		while (*sent_char);

		// Wait for send...
		while (!*sent_char);
		*load = 0;
		*transmit_enable = 0;

	}

	return 0;
}
