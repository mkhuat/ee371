/* 
 * "Small Hello World" example. 
 * 
 * This example prints 'Hello from Nios II' to the STDOUT stream. It runs on
 * the Nios II 'standard', 'full_featured', 'fast', and 'low_cost' example 
 * designs. It requires a STDOUT  device in your system's hardware. 
 *
 * The purpose of this example is to demonstrate the smallest possible Hello 
 * World application, using the Nios II HAL library.  The memory footprint
 * of this hosted application is ~332 bytes by default using the standard 
 * reference design.  For a more fully featured Hello World application
 * example, see the example titled "Hello World".
 *
 * The memory footprint of this example has been reduced by making the
 * following changes to the normal "Hello World" example.
 * Check in the Nios II Software Developers Manual for a more complete 
 * description.
 * 
 * In the SW Application project (small_hello_world):
 *
 *  - In the C/C++ Build page
 * 
 *    - Set the Optimization Level to -Os
 * 
 * In System Library project (small_hello_world_syslib):
 *  - In the C/C++ Build page
 * 
 *    - Set the Optimization Level to -Os
 * 
 *    - Define the preprocessor option ALT_NO_INSTRUCTION_EMULATION 
 *      This removes software exception handling, which means that you cannot 
 *      run code compiled for Nios II cpu with a hardware multiplier on a core 
 *      without a the multiply unit. Check the Nios II Software Developers 
 *      Manual for more details.
 *
 *  - In the System Library page:
 *    - Set Periodic system timer and Timestamp timer to none
 *      This prevents the automatic inclusion of the timer driver.
 *
 *    - Set Max file descriptors to 4
 *      This reduces the size of the file handle pool.
 *
 *    - Check Main function does not exit
 *    - Uncheck Clean exit (flush buffers)
 *      This removes the unneeded call to exit when main returns, since it
 *      won't.
 *
 *    - Check Don't use C++
 *      This builds without the C++ support code.
 *
 *    - Check Small C library
 *      This uses a reduced functionality C library, which lacks  
 *      support for buffering, file IO, floating point and getch(), etc. 
 *      Check the Nios II Software Developers Manual for a complete list.
 *
 *    - Check Reduced device drivers
 *      This uses reduced functionality drivers if they're available. For the
 *      standard design this means you get polled UART and JTAG UART drivers,
 *      no support for the LCD driver and you lose the ability to program 
 *      CFI compliant flash devices.
 *
 *    - Check Access device drivers directly
 *      This bypasses the device file system to access device drivers directly.
 *      This eliminates the space required for the device file system services.
 *      It also provides a HAL version of libc services that access the drivers
 *      directly, further reducing space. Only a limited number of libc
 *      functions are available in this configuration.
 *
 *    - Use ALT versions of stdio routines:
 *
 *           Function                  Description
 *        ===============  =====================================
 *        alt_printf       Only supports %s, %x, and %c ( < 1 Kbyte)
 *        alt_putstr       Smaller overhead than puts with direct drivers
 *                         Note this function doesn't add a newline.
 *        alt_putchar      Smaller overhead than putchar with direct drivers
 *        alt_getchar      Smaller overhead than getchar with direct drivers
 *
 */

#include "sys/alt_stdio.h"
#define sent_char (volatile char *) 0x9000
#define transmit_enable (volatile char *) 0x9010
#define received_char (volatile char *) 0x9020
#define load (volatile char *) 0x9030
#define parallel_out (volatile char *) 0x9040
#define parallel_in (volatile char *) 0x9050
#define leds (char *) 0x9060
#define switches (volatile char *) 0x9070




#define START_GAME 's'
#define WIN_GAME 'w'
#define LOSE_GAME 'l'

int main()
{	
	alt_putstr("\nLetter Hangman! Enter 'g' for guessing, 'p' for proposing: \n");
	char in = alt_getchar();
	if (in == 'g') {
		// Guesser

		// Listen for game start, then clear buffer
		while (!*received_char);
		in = *received_char;
		*received_char = 0;

		if (in != START_GAME){
			alt_printf("\nWanted Game Start=%c, but found %c \n", START_GAME, in);
			exit(0);
		}

		alt_putstr("\nGame start as guesser! \n");

		alt_putstr("\nEnter a letter a guess: \n");
		in = alt_getchar();
		alt_printf("Letter Guessed: %c \n", in);

		// Load guess character
		*parallel_out = in;
		*load = 1;
		*transmit_enable = 1;
		// Wait for send...
		while (!*sent_char);
		*sent_char = 0;
		*transmit_enable = 0;


		// Listen for game status - win or lose
		while (!*received_char);
		in = *received_char;
		*received_char = 0;

		if (in != WIN_GAME || in != LOSE_GAME) {
			alt_printf("\nWanted Game Win=%c or Game Lose=%c, but found %c \n", WIN_GAME, LOSE_GAME, in);
			exit(0);
		}

		if (in == WIN_GAME) {
			alt_putstr("\nGuess was correct!\n");
		} else {
			alt_putstr("\nGuess was wrong!\n");
		}

	} else {
		// Proposer

		alt_putstr("\nEnter a letter for an opponent to guess: \n");
		char to_guess = alt_getchar();
		alt_printf("Guess target: %c \n", to_guess);

		// Send game start

		// Load start game character
		*parallel_out = START_GAME;
		*load = 1;

		// Wait for send...
		while (!*sent_char);
		*sent_char = 0;

		// Listen for game start ack/guess, then clear buffer
		while (!*received_char);
		char received_guess = *received_char;
		*received_char = 0;

		alt_putstr("\nGame start as proposer! \n");
		alt_printf("\nReceived guess: %c \n", received_guess);


		if (to_guess == received_guess) {
			alt_putstr("\nGuess was correct!\n");
			*parallel_out = WIN_GAME;
		} else {
			alt_putstr("\nGuess was wrong!\n");
			*parallel_out = LOSE_GAME;
		}

		// Load game win or loss
		*load = 1;

		// Wait for send...
		while (!*sent_char);
		*sent_char = 0;
	}
	
	return 0;
}
